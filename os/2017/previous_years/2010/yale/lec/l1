<title>L1</title>
<html>
<head>
</head>
<body>

<h1>O/S overview</h1>

<h2>Overview</h2>

<ul>
<li>	Course goals:
	<ul>
	<li>	Understand both high-level operating systems principles
		and low-level design and implementation details, by:
		<ol>
		<li>	Analyzing xv6, a small Unix-like system
			comparable in structure to a common modern OS.
		<li>	Designing and implementing a small OS
			with with a somewhat different structure.
		</ol>
	<li>	Develop hands-on experience building nontrivial software systems
	<li>	Build other skills crucial to effective programming, such as:
		<ul>
		<li>	Clear, precise thinking about how software works
		<li>	Reading, understanding, and building on code
			written by others
		<li>	Collaborative design, development, and debugging
		<li>	Sleuthing skills: finding subtle, non-obvious bugs
		</ul>
	</ul>

<li>	Why study operating systems?
	<ul>
	<li>	Understand how computers work "under the hood"
		<ul>
		<li>	How CPUs, memory, devices work together
			to support diverse applications
		<li>	How high-level architecture concepts and algorithms
			are embodied in "nuts and bolts" systems
		</ul>
	<li>	Understand functionality, performance tradeoffs
		<ul>
		<li>	What computer will best suit a given purpose,
			with what hardware components, what software?
		<li>	What are the fundamental differences between,
			e.g., Windows and Linux; what is just window dressing?
		<li>	What is causing mysterious crashes/failures,
			and how to fix them?
		<li>	If my system is slow, how to make it faster?
		</ul>
	<li>	Understand engineering of large event-driven systems in general
		<ul>
		<li>	Real systems are huge, expensive to build and debug
		<li>	Infinite state spaces, constant flood of diverse inputs,
			many concurrent but interacting activities
		<li>	Impossible to make work reliably
			without clear structure, design principles
		</ul>
	</ul>

<li>	What problems do operating systems solve?
	<ul>
	<li>	<b>Convenience:</b> abstract away painful hardware details
	<li>	<b>Portability:</b> same apps can run on diverse hardware
	<li>	<b>Sharing:</b> multiplex physical resources among apps, users
	<li>	<b>Governance:</b> protect processes, users from each other
	<li>	<b>Reliability:</b> hide hardware failures from apps, users
	<li>	<b>Distribution:</b> make apps, users oblivious to
					exactly where the magic happens
	</ul>

<li>	How does an OS solve these problems?
	<ul>
	<li>	<b>Abstraction:</b>
		<i>"Every problem in computer science can be solved by
		another level of indirection."</i> -Wheeler? Lampson?
	<li>	Typical OS abstractions:
		<ul>
		<li>	<b>Process:</b> abstract machine
		<li>	<b>Thread:</b> abstract CPU
		<li>	<b>Virtual memory:</b> abstract memory
		<li>	<b>File:</b> abstract disk/tape/flash/etc.
		<li>	<b>Pipe, Socket:</b> abstract communication wire
		</ul>
	<li>	Apps use abstractions via system calls: e.g.,
		<pre>
		fd = open("/dev/foo", 1);
		write(fd, "hello\n", 6);
		pid = fork();
		</pre>
	</ul>

<li>	Why is OS design hard (and thus interesting)?
	<ul>
	<li>	Tradeoff between fast/efficient and abstract/modular
	<li>	Want to support many features with a few simple mechanisms
	<li>	Interactions: e.g., <code>fd = open(); ...; fork();</code>
	<li>	Many open problems: security, multi-core, distribution
	</ul>

<li>	You'll be glad you learned about operating systems if you...
	<ul>
	<li>	want to work on the above problems
	<li>	care about what's going on under the hood
	<li>	have to build reliable, high-performance systems
	<li>	need to diagnose bugs or security problems
	</ul>

</ul>

<h2>Course structure</h2>

<ul>

<li>Lectures (20% of grade)
	<ul>
	<li>first, basic OS ideas
	<li>then extended inspection of xv6, a traditional O/S
	<li>finally, a series of recent topics
	<li>preparatory homework assignments - see schedule
		<ul>
		<li>	due at beginning of lecture
		<li>	no late homework accepted after shopping period
		</ul>
	<li>	grade based on homeworks and class participation
	</ul>

<li>Labs (60% of grade): build a small, special-purpose OS
	oriented toward parallel/cloud computing applications
	(scientific computing, rendering/raytracing, data mining, etc.)

	<ul>
	<li>You build it in six labs, final project of your choice
	<li>Kernel interface: only a few simple but powerful abstractions
	<li>Development environment: gcc, qemu
	<li>Extensive hacking: work in teams of 2-3, but...
		<ul>
		<li>	not always the same teams
		<li>	not always building on your own code
		</ul>
	<li>Each lab assignment includes several <i>challenge problems</i>:
		<ul>
		<li>	CPSC 422 (undergrads):
			all challenge problems optional.
		<li>	CPSC 522 (grad students):
			must complete at least <i>one</i>
			challenge problem per team per lab.
			Challenge problems of your own choice
			allowed with instructor's permission.
		</ul>
	<li>All labs must be turned in to pass the course
	<li>Labs due Thursdays at 11:59PM.
		8 free late days, no credit for any lab more than 3 days late
	</ul>

<li>One midterm exam (20% of grade)
	<ul>
	<li>	In-class
	<li>	Open book, open notes
	</ul>
</ul>

<li>Reference materials
	<ul>
	<li>	primary: draft xv6 book, <a href="../reference">online</a> and
		<a href="https://ris-store.its.yale.edu/cpdblist.jsp"
		>in print from Yale RIS</a>.
	<li>	secondary: "Operating System Concepts"
	<li>	other: see Reference section on home page
	</ul>

<h2>Case study: Unix/xv6 shell (simplified)</h2>

<ul>
<li>provides an interactive command execution and programming language
<li>typically handles login session, runs other processes
<li>look at some simple examples of shell operations, how they
    use different OS abstractions, and how those abstractions
    fit together.
    See <a href="../bib/ritchie74unix.pdf">Unix paper</a>
    if you are unfamiliar with the shell.
<li>Basic structure:
<pre>
	while (1) {
	    write (1, "$ ", 2);			// 1 = STDOUT_FILENO
	    readcommand (0, command, args);	// parse user input, 0 = STDIN_FILENO
	    if ((pid = fork ()) == 0) {		// child?
		exec (command, args, 0);
	    } else if (pid > 0) {		// parent?
		wait (0);			// wait for child to terminate
	    } else {
		perror ("Failed to fork\n");
	    }
	}
</pre>
<li>system calls: <code>read</code>, <code>write</code>,
	<code>fork</code>, <code>exec</code>, <code>wait</code>.
    conventions: -1 return value signals error,
    error code stored in <code>errno</code>,
    <code>perror</code> prints out a descriptive error
    message based on <code>errno</code>.
<li>What's the shell doing?
    fork, exec, wait: process diagram
    (PID, address space -- memory of the process, parent links).
    fork returns twice, in some sense!
<p>The split of process creation into fork and exec
    turns out to have been an inspired choice, though that
    might not have been clear at the time; see today's
    <a href="../bib/ritchie79evolution.pdf">assigned paper</a>.
<li>why call "wait"?  to wait for the child to terminate and collect
    its exit status.  (if child finishes, child becomes a zombie until
    parent calls wait.)

<li>Example:
<pre>
	$ ls
</pre>
<li>how does ls know which directory to look at?
<li>how does it know what to do with its output?
<li>I/O: process has file descriptors, numbered starting from 0.
<li>system calls: open, read, write, close

<li>numbering conventions:
<ul>
<li>file descriptor 0 for input (e.g., keyboard). read_command: 
<pre>
     read (0, buf, bufsize)
</pre>
<li>file descriptor 1 for output (e.g., terminal)
<pre>
     write (1, "hello\n", strlen("hello\n"))
</pre>
<li>file descriptor 2 for error (e.g., terminal)
</ul>
<li>on fork, child inherits open file descriptors from parent (show in
    process diagram).
<li>on exec, process retains file descriptors, except those specifically
    marked as close-on-exec: <code>fcntl(fd, F_SETFD, FD_CLOEXEC)</code>

<li>How does the shell implement:
<pre>
     $ ls > tmp1
</pre>
just before exec insert:
<pre>
	close(1);
	creat("tmp1", 0666);   // fd will be 1
</pre>
<p>The kernel always uses the first free file descriptor, 1 in this case.
    Could use <code>dup2()</code> to clone a file descriptor to a new number.

<li>Good illustration for why fork + exec vs. CreateProcess on Windows.
    (CreateProcess takes 10 arguments.)

<li>What if you run the shell itself with redirection?
<pre>
     $ sh < script > tmp1
</pre>
If for example the file <code>script</code> contains
<pre>
     echo one
     echo two
</pre>
FD inheritance makes this work well.

<li>What if we want to redirect multiple FDs (stdout, stderr)
    for programs that print to both?
<pre>
    $ ls f1 f2 nonexistant-f3 > tmp1 2> tmp1
</pre>
after creat, insert:
<pre>
	close(2);
	creat("tmp1", 0666);   // fd will be 2
</pre>
why is this bad?  illustrate what's going on with file descriptors.  better:
<pre>
	close(2);
	dup(1);		       // fd will be 2
</pre>
or in bourne shell syntax,
<pre>
    $ ls f1 f2 nonexistant-f3 > tmp1 2>&1
</pre>

<li>Linux has a nice representation of a process and its FDs, under /proc/PID/
<ul>
<li>maps: VA range, perms (p=private, s=shared), offset, dev, inode, pathname
<li>fd: symlinks to files pointed to by each fd.
    (what's missing in this representation?)
<li>can do fd manipulation in shell and see it reflected in /proc/$$/fd
</ul>

<li>how to run a series of programs on some data?
<pre>
	$ sort < file.txt > tmp1
	$ uniq tmp1 > tmp2
	$ wc tmp2
	$ rm tmp1 tmp2
</pre>
can be more concisely done as:
<pre>
        $ sort < file.txt | uniq | wc
</pre>
<li>A pipe is a one-way communication channel.  Here is a simple example:
<pre>
        int fdarray[2];
        char buf[512];
        int n;

        pipe(fdarray);
        write(fdarray[1], "hello", 5);
        n = read(fdarray[0], buf, sizeof(buf));
        // buf[] now contains 'h', 'e', 'l', 'l', 'o'
</pre>
<li>file descriptors are inherited across <code>fork()</code>, so this also works:
<pre>
        int fdarray[2];
        char buf[512];
        int n, pid;

        pipe(fdarray);
        pid = fork();
        if(pid > 0){
          write(fdarray[1], "hello", 5);
        } else {
          n = read(fdarray[0], buf, sizeof(buf));
        }
</pre>
<li>How does the shell implement pipelines (i.e., cmd 1 | cmd 2 |..)?
We want to arrange that the output of cmd 1 is the input of cmd 2.
The way to achieve this goal is to manipulate stdout and stdin.
<li>The shell creates processes for each command in
the pipeline, hooks up their stdin and stdout,
and waits for the last process of the
pipeline to exit.  Here's a sketch of what the shell does,
in the child process of the <code>fork()</code> we already have,
to set up a pipe:
<pre>	    
	    int fdarray[2];

  	    if (pipe(fdarray) < 0) panic ("error");
	    if ((pid = fork ()) == 0) {  child (left end of pipe)
	       close (1);
	       tmp = dup (fdarray[1]);   // fdarray[1] is the write end, tmp will be 1
	       close (fdarray[0]);       // close read end
	       close (fdarray[1]);       // close fdarray[1]
	       exec (command1, args1, 0);
	    } else if (pid > 0) {        // parent (right end of pipe)
	       close (0);
	       tmp = dup (fdarray[0]);   // fdarray[0] is the read end, tmp will be 0
	       close (fdarray[0]);
	       close (fdarray[1]);       // close write end
	       exec (command2, args2, 0);
	    } else {
	       printf ("Unable to fork\n");
            }
</pre>
<li>Who waits for whom? (draw a tree of processes)
<li>Why close read-end and write-end? ensure that
every process starts with 3 file descriptors, and that
reading from the pipe returns end of file after the first command exits.
<li>How do you create a background job?
<pre>
        $ compute &
</pre>
<li>How does the shell implement "&", backgrounding?  (Don't call wait
immediately).

</body>



<!--  LocalWords:  Symbian JavaOS VxWorks pSOS IPC rfork min exokernel gcc CE
 -->
<!--  LocalWords:  bochs PalmOS PDA printf readcommand args pid perror ls buf
 -->
<!--  LocalWords:  bufsize strlen tmp fd
 -->
