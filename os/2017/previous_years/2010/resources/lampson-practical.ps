%!PS-Adobe-3.0
%%Title: 14.pdf
%%Creator: Windows NT 4.0
%%CreationDate: 9:24 2/19/1999
%%BoundingBox: 13 13 599 780
%%LanguageLevel: 2
%%DocumentNeededFonts: (atend)
%%DocumentSuppliedFonts: (atend)
%%EndComments
%%BeginSetup
[{0
/languagelevel where{pop languagelevel 2 ge}{false}ifelse
{1 dict dup/JobTimeout 4 -1 roll put setuserparams}
{statusdict/setjobtimeout get exec}ifelse
}stopped cleartomark
[{120
/languagelevel where{pop languagelevel 2 ge}{false}ifelse
{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}
{statusdict/waittimeout 3 -1 roll put}ifelse
}stopped cleartomark
/#copies 1 def
[{
%%BeginFeature: *HPHalftone PrintersDefault

%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Smoothing PrinterDefault

%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *PageSize Letter

             <</DeferredMediaSelection true /PageSize [612 792] /ImagingBBox null>> setpagedevice
%%EndFeature
} stopped cleartomark
%%EndSetup
%%BeginProlog

%%BeginResource: procset NTPSOct95
/NTPSOct95 100 dict dup begin/bd{bind def}bind def/ld{load def}bd/ed{exch def}
bd/a{currentpoint}bd/c/curveto ld/d/dup ld/e/eofill ld/f/fill ld/tr/translate
ld/gr/grestore ld/gs/gsave ld/j/setlinejoin ld/L/lineto ld/M/moveto ld/n
/newpath ld/cp/closepath ld/rm/rmoveto ld/sl/setlinewidth ld/sd/setdash ld/g
/setgray ld/r/setrgbcolor ld/s/stroke ld/t/show ld/aw/awidthshow ld/im
/imagemask ld/MS{moveto show}bd/SF{findfont exch scalefont setfont}bd/SM{cmtx
setmatrix}bd/MF{findfont exch makefont setfont}bd/CM{/cmtx matrix currentmatrix
def}bd/B{M exch dup 0 rlt exch 0 exch rlt neg 0 rlt}bd/CB{B cp eoclip}bd/EA{1
index 0/G0 put 4 string 1 1 4 -1 roll{3 copy neg exch cvs dup 0 71 put cvn 3 -1
roll exch put}for pop}bd/rlt/rlineto ld/L2?/languagelevel where{pop
languagelevel 2 ge}{false}ifelse def end def 
%%EndResource
NTPSOct95 begin
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
%%BeginFont: CEEGEZ+MSTT31c548
%!FontType1-1.0: CEOIFK+MSTT31c548 1
13 dict begin
/FontName /CEOIFK+MSTT31c548 def 
/FontType 1 def
/FontBBox {-6 -471 1799 2007} readonly def
/FontMatrix [0.00049 0 0 0.00049 0 0] readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/BaseFontName (MSTT31c548) def
end def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 31 /G1F put
dup 32 /G20 put
dup 33 /G21 put
dup 34 /G22 put
dup 35 /G23 put
dup 36 /G24 put
dup 37 /G25 put
dup 38 /G26 put
dup 39 /G27 put
dup 40 /G28 put
dup 41 /G29 put
dup 42 /G2A put
dup 43 /G2B put
dup 44 /G2C put
dup 45 /G2D put
dup 46 /G2E put
dup 47 /G2F put
dup 48 /G30 put
dup 49 /G31 put
dup 50 /G32 put
dup 51 /G33 put
dup 52 /G34 put
dup 53 /G35 put
dup 54 /G36 put
dup 55 /G37 put
dup 56 /G38 put
dup 57 /G39 put
dup 58 /G3A put
dup 59 /G3B put
dup 60 /G3C put
dup 61 /G3D put
dup 62 /G3E put
dup 63 /G3F put
dup 64 /G40 put
dup 65 /G41 put
dup 66 /G42 put
dup 67 /G43 put
dup 68 /G44 put
dup 69 /G45 put
dup 70 /G46 put
dup 71 /G47 put
dup 72 /G48 put
dup 73 /G49 put
dup 74 /G4A put
dup 75 /G4B put
dup 76 /G4C put
dup 77 /G4D put
dup 78 /G4E put
dup 79 /G4F put
dup 80 /G50 put
dup 81 /G51 put
dup 82 /G52 put
dup 83 /G53 put
dup 84 /G54 put
dup 85 /G55 put
dup 86 /G56 put
dup 87 /G57 put
dup 88 /G58 put
dup 89 /G59 put
dup 90 /G5A put
dup 91 /G5B put
dup 92 /G5C put
dup 93 /G5D put
dup 94 /G5E put
dup 95 /G5F put
dup 96 /G60 put
dup 97 /G61 put
dup 98 /G62 put
dup 99 /G63 put
dup 100 /G64 put
dup 101 /G65 put
dup 102 /G66 put
dup 103 /G67 put
dup 104 /G68 put
dup 105 /G69 put
dup 106 /G6A put
dup 107 /G6B put
dup 108 /G6C put
dup 109 /G6D put
dup 110 /G6E put
dup 111 /G6F put
dup 112 /G70 put
dup 113 /G71 put
dup 114 /G72 put
dup 115 /G73 put
dup 116 /G74 put
dup 117 /G75 put
dup 118 /G76 put
dup 119 /G77 put
dup 120 /G78 put
dup 121 /G79 put
dup 122 /G7A put
dup 123 /G7B put
dup 124 /G7C put
dup 125 /G7D put
dup 126 /G7E put
dup 127 /G7F put
dup 128 /G80 put
dup 129 /G81 put
dup 130 /G82 put
dup 131 /G83 put
dup 132 /G84 put
dup 133 /G85 put
dup 134 /G86 put
dup 135 /G87 put
dup 136 /G88 put
dup 137 /G89 put
dup 138 /G8A put
dup 139 /G8B put
dup 140 /G8C put
dup 141 /G8D put
dup 142 /G8E put
dup 143 /G8F put
dup 144 /G90 put
dup 145 /G91 put
dup 146 /G92 put
dup 147 /G93 put
dup 148 /G94 put
dup 149 /G95 put
dup 150 /G96 put
dup 151 /G97 put
dup 152 /G98 put
dup 153 /G99 put
dup 154 /G9A put
dup 155 /G9B put
dup 156 /G9C put
dup 157 /G9D put
dup 158 /G9E put
dup 159 /G9F put
dup 160 /GA0 put
dup 161 /GA1 put
dup 162 /GA2 put
dup 163 /GA3 put
dup 164 /GA4 put
dup 165 /GA5 put
dup 166 /GA6 put
dup 167 /GA7 put
dup 168 /GA8 put
dup 169 /GA9 put
dup 170 /GAA put
dup 171 /GAB put
dup 172 /GAC put
dup 173 /GAD put
dup 174 /GAE put
dup 175 /GAF put
dup 176 /GB0 put
dup 177 /GB1 put
dup 178 /GB2 put
dup 179 /GB3 put
dup 180 /GB4 put
dup 181 /GB5 put
dup 182 /GB6 put
dup 183 /GB7 put
dup 184 /GB8 put
dup 185 /GB9 put
dup 186 /GBA put
dup 187 /GBB put
dup 188 /GBC put
dup 189 /GBD put
dup 190 /GBE put
dup 191 /GBF put
dup 192 /GC0 put
dup 193 /GC1 put
dup 194 /GC2 put
dup 195 /GC3 put
dup 196 /GC4 put
dup 197 /GC5 put
dup 198 /GC6 put
dup 199 /GC7 put
dup 200 /GC8 put
dup 201 /GC9 put
dup 202 /GCA put
dup 203 /GCB put
dup 204 /GCC put
dup 205 /GCD put
dup 206 /GCE put
dup 207 /GCF put
dup 208 /GD0 put
dup 209 /GD1 put
dup 210 /GD2 put
dup 211 /GD3 put
dup 212 /GD4 put
dup 213 /GD5 put
dup 214 /GD6 put
dup 215 /GD7 put
dup 216 /GD8 put
dup 217 /GD9 put
dup 218 /GDA put
dup 219 /GDB put
dup 220 /GDC put
dup 221 /GDD put
dup 222 /GDE put
dup 223 /GDF put
dup 224 /GE0 put
dup 225 /GE1 put
dup 226 /GE2 put
dup 227 /GE3 put
dup 228 /GE4 put
dup 229 /GE5 put
dup 230 /GE6 put
dup 231 /GE7 put
dup 232 /GE8 put
dup 233 /GE9 put
dup 234 /GEA put
dup 235 /GEB put
dup 236 /GEC put
dup 237 /GED put
dup 238 /GEE put
dup 239 /GEF put
dup 240 /GF0 put
dup 241 /GF1 put
dup 242 /GF2 put
dup 243 /GF3 put
dup 244 /GF4 put
dup 245 /GF5 put
dup 246 /GF6 put
dup 247 /GF7 put
dup 248 /GF8 put
dup 249 /GF9 put
dup 250 /GFA put
dup 251 /GFB put
dup 252 /GFC put
dup 253 /GFD put
dup 254 /GFE put
dup 255 /GFF put
readonly def
currentdict end
currentfile eexec
B74321DAEFBBAC6F60E31FFB19C1BEB57BE5C9A79A6713FAEF7286F56D37A4DA
FD034D4D8E480ABA6BAE6F829BCBC8D7497860CE62CEAD19C0E4DBF104E0F096
D714EDDD1C04EABD2E1AE9B9B132368925A1629DD5182206742D1D082A12F078
0FE57F92B504F0074AB0C9E5D210E6D9D83AF7407328E481339791F572907740
F2858CCD9118B8AE9036A76C6D4B991B15260EF3F6172D007D7D0E10AFD65386
4EB99016FB469D8AE79CC36CA40C0DDD0809188C5D33042F5812807C9F87CC3B
E9789A6089BB0FB8636D6CE761E9110969EC61E7D639E57AA0D8BA0EADB0B134
6ED4E2E4A8844F03B6CC75B808B595323DAE17C1FC43D751C58AC61405594DC9
E425B6F3575DA81D0D2C03FA24A78E6E3B85EB914EEF8AA658501AADE0DBFB12
A35F89B7F0B590749E87F00E6AF8B3F94876E364E8D652C3178E92971FDBB75B
C2A86E4BE17E9F347D3885D824CE570B07DBFA600C17257C1BF291985A236F49
9E26BE2F2EA07E391FCC4EBCC92A6223178AD80CB3B7858FF1783DC42D720D5E
05776A25EB4676DDA48FC93B67719AAB89A17B99278925FFF9B8267BACDE5210
3F177732C9A8C04AC209B187F18178AC720774136E522876168F088D7CD974FF
5A80E2761F88641BCD73374FE8513BC6B7FE43F7FC60D37A84A602562F56D69B
AD0A48083DFF76284D3B07E0772824A8A3FB0A869EB497024BCC944D19834071
EAC1559A345A184FF8283CE0AFF0E3DF94C22A124742A4B0CB64B3C26E0A3EF5
0E40B9B58FAA70DF55B9B74D6DCB71A60908B2C8CA51964E43988C8C8ED7C49B
B923BFC1D7E5AA32CE2A369DE764A2B7D570404BCCB9D5DC3BEF99D58E7479E3
72D05536C6BC9A1876241E59C87973F483C3B8CAF045383306CED57D8A6818F2
B9937E091571DD61EADBDB5DEF52ED1D6DAC373ABC079B753C8F03C8429AC61D
1B38E2EF9838AC9366BDD42876FBC8410D090E589865D4A21B059877D78B4B0C
B143AD0342C66EF6FBE2FB5070DE963625DDAEA43E3C92A5F8A6576CF41E60A2
1E04FAE8FCCB20DC0EA68AE3DF55B68CC2F145A06CE1818F6F1CA3B07482C53D
58F76AD53A43E30046E876CF3207070D98DA81698D5B45CE0008C97CA2DA2A48
685A007FD0B52A2C14CF9AB54437F794D6504BE74D6EB41B2EF4EF31B24449AC
14F493E5179BDEF27BC2D6E1668E9C67759638DA29BB255409FBC1F7CF2A9899
A31B1CDCF98BB6DFCA0137BDA045FEB9E08CBD48549E8B47FC3646E4705BBEEA
19E39BFAF869249AF698FB1590079896578D5EBCA1A71604E69332A6C3B4A8C1
A1E3B0E563C70A8D1E5B9FC4BCF633BC9D6A33D38AFB1FB3C14F0CD63BF349F7
B0AF4AC447E728D088803016AFC9781F6C130F5AB6A83E35871812B0C9152E02
2E7A0D6FE29FEF272C552D1EFE35C4FFC1FE9E0DC2D2083ABDA717097BD7D484
42A7A64AFD583CB9F414B7ABDE41DB5CBED1903ECFBFCDAFDF4608481BBEF56C
CFFF5CC2732772CFAC0A8DA10BC0614C2512C0C68787205B90C33A1B862D29EC
00EF87181375D5E6212E9CA7DAFE789EE86FD4DB8AAFD086BFD9A9F995F4C92F
4A354A5A51897E4AABA72BE2B55A5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark
%%EndFont
%%BeginFont: FHAFZZ+MSTT31c519
%!FontType1-1.0: CEOIFM+MSTT31c519 1
13 dict begin
/FontName /CEOIFM+MSTT31c519 def 
/FontType 1 def
/FontBBox {-179 -471 1799 2058} readonly def
/FontMatrix [0.00049 0 0 0.00049 0 0] readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/BaseFontName (MSTT31c519) def
end def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 31 /G1F put
dup 32 /G20 put
dup 33 /G21 put
dup 34 /G22 put
dup 35 /G23 put
dup 36 /G24 put
dup 37 /G25 put
dup 38 /G26 put
dup 39 /G27 put
dup 40 /G28 put
dup 41 /G29 put
dup 42 /G2A put
dup 43 /G2B put
dup 44 /G2C put
dup 45 /G2D put
dup 46 /G2E put
dup 47 /G2F put
dup 48 /G30 put
dup 49 /G31 put
dup 50 /G32 put
dup 51 /G33 put
dup 52 /G34 put
dup 53 /G35 put
dup 54 /G36 put
dup 55 /G37 put
dup 56 /G38 put
dup 57 /G39 put
dup 58 /G3A put
dup 59 /G3B put
dup 60 /G3C put
dup 61 /G3D put
dup 62 /G3E put
dup 63 /G3F put
dup 64 /G40 put
dup 65 /G41 put
dup 66 /G42 put
dup 67 /G43 put
dup 68 /G44 put
dup 69 /G45 put
dup 70 /G46 put
dup 71 /G47 put
dup 72 /G48 put
dup 73 /G49 put
dup 74 /G4A put
dup 75 /G4B put
dup 76 /G4C put
dup 77 /G4D put
dup 78 /G4E put
dup 79 /G4F put
dup 80 /G50 put
dup 81 /G51 put
dup 82 /G52 put
dup 83 /G53 put
dup 84 /G54 put
dup 85 /G55 put
dup 86 /G56 put
dup 87 /G57 put
dup 88 /G58 put
dup 89 /G59 put
dup 90 /G5A put
dup 91 /G5B put
dup 92 /G5C put
dup 93 /G5D put
dup 94 /G5E put
dup 95 /G5F put
dup 96 /G60 put
dup 97 /G61 put
dup 98 /G62 put
dup 99 /G63 put
dup 100 /G64 put
dup 101 /G65 put
dup 102 /G66 put
dup 103 /G67 put
dup 104 /G68 put
dup 105 /G69 put
dup 106 /G6A put
dup 107 /G6B put
dup 108 /G6C put
dup 109 /G6D put
dup 110 /G6E put
dup 111 /G6F put
dup 112 /G70 put
dup 113 /G71 put
dup 114 /G72 put
dup 115 /G73 put
dup 116 /G74 put
dup 117 /G75 put
dup 118 /G76 put
dup 119 /G77 put
dup 120 /G78 put
dup 121 /G79 put
dup 122 /G7A put
dup 123 /G7B put
dup 124 /G7C put
dup 125 /G7D put
dup 126 /G7E put
dup 127 /G7F put
dup 128 /G80 put
dup 129 /G81 put
dup 130 /G82 put
dup 131 /G83 put
dup 132 /G84 put
dup 133 /G85 put
dup 134 /G86 put
dup 135 /G87 put
dup 136 /G88 put
dup 137 /G89 put
dup 138 /G8A put
dup 139 /G8B put
dup 140 /G8C put
dup 141 /G8D put
dup 142 /G8E put
dup 143 /G8F put
dup 144 /G90 put
dup 145 /G91 put
dup 146 /G92 put
dup 147 /G93 put
dup 148 /G94 put
dup 149 /G95 put
dup 150 /G96 put
dup 151 /G97 put
dup 152 /G98 put
dup 153 /G99 put
dup 154 /G9A put
dup 155 /G9B put
dup 156 /G9C put
dup 157 /G9D put
dup 158 /G9E put
dup 159 /G9F put
dup 160 /GA0 put
dup 161 /GA1 put
dup 162 /GA2 put
dup 163 /GA3 put
dup 164 /GA4 put
dup 165 /GA5 put
dup 166 /GA6 put
dup 167 /GA7 put
dup 168 /GA8 put
dup 169 /GA9 put
dup 170 /GAA put
dup 171 /GAB put
dup 172 /GAC put
dup 173 /GAD put
dup 174 /GAE put
dup 175 /GAF put
dup 176 /GB0 put
dup 177 /GB1 put
dup 178 /GB2 put
dup 179 /GB3 put
dup 180 /GB4 put
dup 181 /GB5 put
dup 182 /GB6 put
dup 183 /GB7 put
dup 184 /GB8 put
dup 185 /GB9 put
dup 186 /GBA put
dup 187 /GBB put
dup 188 /GBC put
dup 189 /GBD put
dup 190 /GBE put
dup 191 /GBF put
dup 192 /GC0 put
dup 193 /GC1 put
dup 194 /GC2 put
dup 195 /GC3 put
dup 196 /GC4 put
dup 197 /GC5 put
dup 198 /GC6 put
dup 199 /GC7 put
dup 200 /GC8 put
dup 201 /GC9 put
dup 202 /GCA put
dup 203 /GCB put
dup 204 /GCC put
dup 205 /GCD put
dup 206 /GCE put
dup 207 /GCF put
dup 208 /GD0 put
dup 209 /GD1 put
dup 210 /GD2 put
dup 211 /GD3 put
dup 212 /GD4 put
dup 213 /GD5 put
dup 214 /GD6 put
dup 215 /GD7 put
dup 216 /GD8 put
dup 217 /GD9 put
dup 218 /GDA put
dup 219 /GDB put
dup 220 /GDC put
dup 221 /GDD put
dup 222 /GDE put
dup 223 /GDF put
dup 224 /GE0 put
dup 225 /GE1 put
dup 226 /GE2 put
dup 227 /GE3 put
dup 228 /GE4 put
dup 229 /GE5 put
dup 230 /GE6 put
dup 231 /GE7 put
dup 232 /GE8 put
dup 233 /GE9 put
dup 234 /GEA put
dup 235 /GEB put
dup 236 /GEC put
dup 237 /GED put
dup 238 /GEE put
dup 239 /GEF put
dup 240 /GF0 put
dup 241 /GF1 put
dup 242 /GF2 put
dup 243 /GF3 put
dup 244 /GF4 put
dup 245 /GF5 put
dup 246 /GF6 put
dup 247 /GF7 put
dup 248 /GF8 put
dup 249 /GF9 put
dup 250 /GFA put
dup 251 /GFB put
dup 252 /GFC put
dup 253 /GFD put
dup 254 /GFE put
dup 255 /GFF put
readonly def
currentdict end
currentfile eexec
7961326FB82D188B531181FB81499E8DAF2EFDB60B3D63F9167873A164BBC876
C0B59B17FD95B520CA78538000C600F0B2E34E38E923201DB3D0178C5DA4A04A
67CD664351D552DB236DADE9377D281CFBEFC7FD264D8803018D85D9E3050138
C2FED5F5A354DADA2D775E6FB35CBE17345FDF491FC4B763AC823836B8B5186A
FF5AB24EDE4AD4B44B2CAAFE5C6DCC77B19FE371E7A34241CE75F1DB9C1134E2
ADA9D83359104AE31DB733E70B37AD2D61F6E5F7F39DCE0DDE25F71CEF2BE3FF
A6ABE721F6C60544A1DFD0A49353B8401E71C1B12F7AFCC31EB937A501B5A95F
B11C393B27F9AC4E994144BF3846DA804EB345B2E1F4B4489E392D53698BA55F
5399E1E6B649EBA106C302D148271890E50503912BEBEF1FEE852C5DAC917E30
F41CE95FA41621A2D4F63713DBB1F129E5AC87B4001D7E70AFD470BCC4BBE8F5
F6F797103EFD536D8A203EA72119D2484C8FA2443E2C76C10B15269A9DBE9A14
293B004E276F31CEAC75F7A95632AF4A33EA97791801084A3246BAFCD57A6E80
DF83116B0E0D2264DB42318483EDC3204814EF7F439A96ACC0379E6C685D08D1
D6FAFDC9F1B21095A28DE1E096555DA9410069FB3F1F51421F2478E886135CD0
DC32DFEDE301EF9FF989CBF670530719608CD62AD16E9D833942F2D43DC7F146
A92DB53B7D196F72328E58630A19B44DAFBD603222BE25A75639987DF3589D8C
0C3B5DC8E940558938D5D239BF5ECE14AA45FCCD357167150731770469E293EF
D4C57F4DE9D9EDD0C81B64C6E630172CB5443A16E7EAA4D28DDB3ACD47E78885
56A5C31F69E93555250A457F36884BF8BC83DCEA810908F75EE8A568FFC6B4B1
BA4525028A5BB417EEEE67A9B8D4F44EECE2DD22F41A1EC8D91EA8151D965783
E5F483C6587968A767404E146E606E82C84529A85A8C2816E4F17B01096840CA
90EBD0706CD3229C18FF610EF33FED9503705DD67C4E4A4F014CE40E649B42CB
63A3EEE8A4A1D30E8B432478C297A4CBA83A501C8DFF99CA74B2F0F8D9F82A82
E44B04522CCD88D739CAF9FAB40A1A3F5D89C78FCF7ABF96D670994117FC147C
54ABD7F6A3FAA8B678DF16A3E52972728C60CF6EF94D0EAF70FE2A457A79F03B
E5858273DC8379922A63779CB68C6D394250D4B9BE14AB037971D494D922CD70
E5E0F55242EBD34EB3481D61F04301B0B5B180667FA6D82701E2F19610B3BCB4
D69A7648160EEBF1D6FF3DB6F9F46A436B59E50B6046A1ACCBBC648349AD5846
1C1ADF5E734EEEF91E7F463FD8F42140840DBEE2AC618C923BABB56E35C97B16
54A105DD84A54DD0385F367292458106DE89196053C179DFF542AD8A497324B1
A8AC5DBF9A62A096A484DAD884CFF0767DB3CEAF3ABDC2B29B7A17CA4FCEFAF2
BE584B15A755E66FBDBD1054CD0B9D543A0EB292132F08D39FA82B83BF87C9A4
D9198B8826BECDBDCF4A54A7600873605C976EC46F2F308E7870AF503B5B2271
84222B6C24815D7A1765586F0B3975C5EAFB884CDC31DC761264D47116D4560E
46C5A4C28C671498013010DC8AB3EC1E4FF479BCAAB3DAA13CB54B3630E5C3E0
D64F602D52D0BCC636CEA8282977FF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark
%%EndFont
/currentpacking where{pop currentpacking true setpacking}if
userdict /PDF 85 dict put
%%BeginFile: pdfvars.prc
%%Copyright: Copyright 1987-1996 Adobe Systems Incorporated. All Rights Reserved.
userdict /PDFVars 75 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/_f0 0 array def
/_f1 1 array def
/_f3 3 array def
/_f4 4 array def
/_fc null def
/_s0 0 array def
/_s1 1 array def
/_s3 3 array def
/_s4 4 array def
/_sc null def
/_cpcf null def
/_cpcs null def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_Tj 0 def
/_italMtx[1 0 .212557 1 0 0]def
/_italMtx_WMode1 [1 -.212557 0 1 0 0]def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
end
%%EndFile
PDFVars begin PDF begin
%%BeginFile: pdfutil.prc
%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.
/bd {bind def} bind def
/ld {load def} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/here {
dup currentdict exch known
{ currentdict exch get true }
{ pop false }
ifelse
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
/npop { { pop } repeat } bd
%%EndFile
%%BeginFile: l2compat
%%Copyright: Copyright 1987-1993 Adobe Systems Incorporated. All Rights Reserved.
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
%%EndFile
%%BeginFile: pdf.prc
%%Copyright: Copyright 1987-1996 Adobe Systems Incorporated. All Rights Reserved.
/initialize {
_ColorSep5044? {sep_ops begin 50 dict begin} if
newpath
} bd
/terminate {
_ColorSep5044? {end end} if
} bd
Level2? StartLoad
{ /m/moveto ld
/l/lineto ld
/c/curveto ld
/setSA/setstrokeadjust ld
} EndLoad
Level2? not StartLoad
{
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
} EndLoad
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/cf currentflat def
/i {
dup 0 eq { pop cf } if
setflat
} bd
/ilp { /_lp /none dd } bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/n {
_doClip 1 ge {
_doClip 1 eq { clip } { eoclip } ifelse
/_doClip 0 dd
} if
newpath
} bd
/f {
_doClip 1 ge
{
gsave sfc fill grestore
_doClip 1 eq { clip } { eoclip } ifelse
newpath
ilp
/_doClip 0 dd
}
{ sfc fill }
ifelse
} bd
/f* {
_doClip 1 ge
{
gsave sfc eofill grestore
_doClip 1 eq { clip } { eoclip } ifelse
newpath
ilp
/_doClip 0 dd
}
{ sfc eofill }
ifelse
} bd
/S {
_doClip 1 ge
{
gsave ssc stroke grestore
_doClip 1 eq { clip } { eoclip } ifelse
newpath
ilp
/_doClip 0 dd
}
{ ssc stroke }
ifelse
} bd
/s { h S } bd
/B {
_doClip dup 1 ge
gsave f grestore
{
gsave S grestore
1 eq { clip } { eoclip } ifelse
newpath
ilp
/_doClip 0 dd
}
{ pop S }
ifelse
} bd
/b { h B } bd
/B* {
_doClip dup 1 ge
gsave f* grestore
{
gsave S grestore
1 eq { clip } { eoclip } ifelse
newpath
ilp
/_doClip 0 dd
}
{ pop S }
ifelse
} bd
/b* { h B* } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/q/save ld
/Q { restore ilp } bd
Level2? StartLoad
{ /defineRes/defineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
} EndLoad
Level2? not StartLoad
{ /AlmostFull?
{ dup maxlength exch length sub 2 le
} bind def
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bind def
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bind def
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bind def
/findRes
{ _categories exch get exch get
} bind def
} EndLoad
/cs
{
dup where { pop load } if
dup /_fcs xdd
ucs
_cpcf exch get
/_fc xdd
/_fp null dd
} bd
/CS
{
dup where { pop load } if
dup /_scs xdd ucs _cpcs exch get /_sc xdd /_sp null dd
} bd
/ucs {
dup type /arraytype eq
{ dup 0 get
dup /Indexed eq
{ pop 0 get }
{ /Pattern eq
{ dup length 2 eq
{ 1 get ucs }
{ 0 get }
ifelse }
{ 0 get }
ifelse }
ifelse }
if }
bd
/_cpcf
15 dict dup begin
/DefaultGray _f1 def
/DeviceGray _f1 def
/DefaultRGB _f3 def
/DeviceRGB _f3 def
/DeviceCMYK _f4 def
/CalGray _f1 def
/CalRGB _f3 def
/CalCMYK _f4 def
/Lab _f3 def
/Pattern _f0 def
/Indexed _f1 def
/Separation _f1 def
/CIEBasedA _f1 def
/CIEBasedABC _f3 def
end
dd
/_cpcs
15 dict dup begin
/DefaultGray _s1 def
/DeviceGray _s1 def
/DefaultRGB _s3 def
/DeviceRGB _s3 def
/DeviceCMYK _s4 def
/CalGray _s1 def
/CalRGB _s3 def
/CalCMYK _s4 def
/Lab _s3 def
/Pattern _s0 def
/Indexed _s1 def
/Separation _s1 def
/CIEBasedA _s1 def
/CIEBasedABC _s3 def
end
dd
Level2? not StartLoad {
/ri/pop ld
/makePat/pop ld
} EndLoad
Level2? StartLoad {
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/makePat /makepattern ld
} EndLoad
Level2? not _ColorSep5044? or StartLoad
{
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
} EndLoad
Level2? not _ColorSep5044? not and StartLoad
{
/_sfc { _fc L1setcolor } dd
/_ssc { _sc L1setcolor } dd
} EndLoad
Level2? _ColorSep5044? not and StartLoad
{
/_sfcs
{
_fcs setcolorspace
} bind dd
/_sscs
{
_scs setcolorspace
} bind dd
/_sfc
{
_fc aload pop
_fp null eq
{ setcolor }
{ _fp setpattern }
ifelse
} bind dd
/_ssc
{
_sc aload pop
_sp null eq { setcolor } { _sp setpattern } ifelse
} bind dd
} EndLoad
/sc
{
_fc astore pop
ilp
} bd
/SC
{
_sc astore pop
ilp
} bd
/scn {
dup type /dicttype eq
{ dup /_fp xdd
/PaintType get 1 eq
{ /_fc _f0 dd ilp }
{ /_fc _cpcf _fcs ucs get dd
sc }
ifelse }
{ sc }
ifelse
} bd
/SCN {
dup type /dicttype eq
{ dup /_sp xdd
/PaintType get 1 eq
{ /_sc _s0 dd ilp }
{ /_sc _cpcs _scs ucs get dd
SC }
ifelse }
{ SC }
ifelse
} bd
/g { /DefaultGray cs sc } bd
/rg { /DefaultRGB cs sc } bd
/k { /DeviceCMYK cs sc } bd
/G { /DefaultGray CS SC } bd
/RG { /DefaultRGB CS SC } bd
/K { /DeviceCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray where
{ pop }
{ /DefaultGray /DeviceGray dd }
ifelse
/DefaultRGB where
{ pop }
{ /DefaultRGB /DeviceRGB dd }
ifelse
0 g 0 G
[] 0 d 0 j 0 J 10 M 1 w
true setSA
} bd
21 dict dup begin
/CosineDot
{ 180 mul cos exch 180 mul cos add 2 div } bd
/Cross
{ abs exch abs 2 copy gt { exch } if pop neg } bd
/Diamond
{ abs exch abs 2 copy add .75 le
{ dup mul exch dup mul add 1 exch sub }
{ 2 copy add 1.23 le
{ .85 mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse }
ifelse } bd
/Double
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add } bd
/DoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add } bd
/Ellipse
{ abs exch abs 2 copy 3 mul exch 4 mul add 3 sub dup 0 lt
{ pop dup mul exch .75 div dup mul add 4 div
1 exch sub }
{ dup 1 gt
{pop 1 exch sub dup mul exch 1 exch sub
.75 div dup mul add 4 div 1 sub }
{ .5 exch sub exch pop exch pop }
ifelse }
ifelse } bd
/EllipseA
{ dup mul .9 mul exch dup mul add 1 exch sub } bd
/EllipseB
{ dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub } bd
/EllipseC
{ dup .5 gt { 1 exch sub } if
dup .25 ge
{ .5 exch sub 4 mul dup mul 1 sub }
{ 4 mul dup mul 1 exch sub }
ifelse
exch
dup .5 gt { 1 exch sub } if
dup .25 ge
{ .5 exch sub 4 mul dup mul 1 sub }
{ 4 mul dup mul 1 exch sub }
ifelse
add -2 div } bd
/InvertedDouble
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedDoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedEllipseA
{ dup mul .9 mul exch dup mul add 1 sub } bd
/InvertedSimpleDot
{ dup mul exch dup mul add 1 sub } bd
/Line
{ exch pop abs neg } bd
/LineX
{ pop } bd
/LineY
{ exch pop } bd
/Rhomboid
{ abs exch abs 0.9 mul add 2 div } bd
/Round
{ abs exch abs 2 copy add 1 le
{ dup mul exch dup mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse } bd
/SimpleDot
{ dup mul exch dup mul add 1 exch sub } bd
/Square
{ abs exch abs 2 copy lt { exch } if pop neg } bd
end
{ /Function defineRes pop } forall
/Identity {} /Function defineRes pop
_ColorSep5044? StartLoad {
/_defaulttransferfunc currenttransfer def
/currentcolortransfer where
{ pop /_defaultcolortransferfuncs [ currentcolortransfer ] def }
if
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransferfunc load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransferfuncs aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
} EndLoad
Level2? StartLoad {
/gs
{
begin
/SA here { setstrokeadjust } if
/OP here { setoverprint } if
/BG here { setblackgeneration } if
/UCR here { setundercolorremoval } if
/TR here
{
_ColorSep5044?
{
dup xcheck
{ concatandsettransfer }
{ aload pop concatandsetcolortransfer }
ifelse
}
{
dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} ifelse
} if
/sethalftonephase isdefined? { /HTP here { sethalftonephase } if } if
/HT here
{ _ColorSep5044?
{ tn5044sethalftone }
{ sethalftone }
ifelse
} if
end
} bd
/_defaulthalftone currenthalftone def
} EndLoad
Level2? not StartLoad {
/gs
{
begin
/SA here { /_sa? xdd } if
/OP here { dup /_op? xdd
/setoverprint where {pop setoverprint}
{pop} ifelse
} if
/TR here
{
_ColorSep5044?
{ dup xcheck
{ concatandsettransfer }
{ aload pop concatandsetcolortransfer }
ifelse
}
{ dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} ifelse
} if
/HT here
{ _ColorSep5044?
{ tn5044sethalftone }
{ sethalftone }
ifelse
} if
end
} bd
5 dict dup
begin
currentscreen 1 [/HalftoneType /SpotFunction /Angle /Frequency ]
{ exch def } forall
end
/_defaulthalftone exch def
} EndLoad
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
_ColorSep5044? StartLoad {
/_sfc
{
_fp null eq
{ _fcs type /arraytype eq
{_fcs 0 get /Separation eq
{
_fcs 1 get /All eq
{
_fc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _fcs 3 get exec _fcs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_fc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
} bind dd
/_ssc
{
_sp null eq
{ _scs type /arraytype eq
{_scs 0 get /Separation eq
{
_scs 1 get /All eq
{
_sc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _scs 3 get exec _scs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_sc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
} bind dd
} EndLoad
%%EndFile
%%BeginFile: pdftext.prc
%%Copyright: Copyright 1987-1997 Adobe Systems Incorporated. All Rights Reserved.
PDF /PDFText 65 dict dup begin put
/initialize { PDFText begin } bd
/terminate { end } bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 2 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
status
{ pop pop pop pop true}
{ false }
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
} bd
pdf_has_composefont?
{
/_pdfComposeFont
{
1 index /CMap resourcestatus
{pop pop true}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{ 3 -1 roll pop composefont true}
{
4 -1 roll pop
_pdfComposeFontName
{
dup _pdfFontStatus
{ findfont definefont true }
{
pop
dup _pdfFontStatus
{ findfont true }
{ pop false }
ifelse
}
ifelse
}
{
dup _pdfFontStatus
{ findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
4 -1 roll pop
_pdfComposeFontName not
{
dup
}
if
2 copy _pdfFontStatus
{pop findfont exch pop true}
{
eq
{pop false}
{
dup _pdfFontStatus
{findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfFaceByStyleDict 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/_pdf_Adobe-Japan1-2 (Adobe-Japan1-2) def
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
} bind def
/_pdfSubSetFontByStyleDict 4 dict dup begin
_pdfFaceByStyleDict
{
_pdf_Adobe-Japan1-2 _pdfConcatNames
dup _pdfFontStatus
{ def }
{
{
pop
dup /SansSerif eq
{
/HeiseiKakuGo-W5-Adobe-Japan1-2 dup _pdfFontStatus
{ def exit }
{ pop }
ifelse
}
if
dup /Serif eq
{
/HeiseiMin-W3-Adobe-Japan1-2 dup _pdfFontStatus
{ def exit }
{ pop }
ifelse
}
if
pop exit
}
loop
}
ifelse
}
forall
end def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
4 copy
_pdfComposeFont
{exch pop exch pop exch pop}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfFaceByStyleDict exch 2 copy known not
{ pop /Default }
if
get
}
for
]
exch pop
3 index 3 index 4 2 roll
_pdfComposeFont
{exch pop}
{
findfont
}
ifelse
}
ifelse
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length dict copy
begin
/_basefont exch def
/Encoding _basefont /Encoding get def
}
{
dup length 2 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
FontType 0 ne
{
/Encoding Encoding dup length array copy dup 16#5c /yen put def
/_fauxfont true def
} if
currentdict
end
definefont pop
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
2 npop
(0) exch 2 copy 0 exch put
gsave
32 eq
{
exch 6 index 6 index 6 index 5 -1 roll widthshow
currentpoint
}
{
false charpath currentpoint
4 index setmatrix stroke
}
ifelse
grestore
moveto
2 copy rmoveto
} exch cshow
6 npop
} def
/jsfTzero {
{
2 npop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 npop
} def
/jsp
{
{
2 npop
(0) exch 2 copy 0 exch put
32 eq
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 npop
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
exch findfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
currentpoint iTm moveto
exch scalefont setfont
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
} bd
/_pdfBoldBaseFont
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
0 0 moveto
dup show
_basefonto setfont
0 0 moveto
show
end
}bd
currentdict
end
def
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
0 0 moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup dup length 2 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
_pdfBoldBaseFont 8 dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
} bd
/MakeBold {
findfont dup
/FontType get 0 eq
{
_pdfBoldBaseFont /_setwidthProc /_pdfType0WidthProc load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{ definefont }
ifelse
}
ifelse
pop
}bd
/MakeItalic {
findfont
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
makefont
definefont pop
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
currentdict readonly pop end
%%EndFile
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/bullet/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/bullet/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs 0 Tr}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin PDFVars/InitAll get exec
% Now emitting Type-3 fonts.
% Now emitting encodings
% Begin encoding-delta
[ 1 /dotlessi/caron 39 /quotesingle 96 /grave 127 /bullet/bullet
/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger
/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/bullet/bullet/bullet/quoteleft/quoteright
/quotedblleft/quotedblright/bullet/endash/emdash/tilde
/trademark/scaron/guilsinglright/oe/bullet/bullet
/Ydieresis/space/exclamdown/cent/sterling/currency
/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree
/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex
/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex
/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae
/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn
/ydieresis
/N39/Times-Bold -1 TZ
% End encoding-delta
% Begin encoding-delta
[ 1 /dotlessi/caron 39 /quotesingle 96 /grave 127 /bullet/bullet
/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger
/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/bullet/bullet/bullet/quoteleft/quoteright
/quotedblleft/quotedblright/bullet/endash/emdash/tilde
/trademark/scaron/guilsinglright/oe/bullet/bullet
/Ydieresis/space/exclamdown/cent/sterling/currency
/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree
/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex
/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex
/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae
/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn
/ydieresis
/N22/Times-Italic -1 TZ
% End encoding-delta
% Begin encoding-delta
[/N23/Symbol -1 TZ
% End encoding-delta
% Begin encoding-delta
[ 127 /G7F/G80
/N24/CEOIFK+MSTT31c548 -1 TZ
% End encoding-delta
% Begin encoding-delta
[ 127 /G7F/G80
/N28/CEOIFM+MSTT31c519 -1 TZ
% End encoding-delta
% Begin encoding-delta
[ 1 /dotlessi/caron 39 /quotesingle 96 /grave 127 /bullet/bullet
/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger
/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/bullet/bullet/bullet/quoteleft/quoteright
/quotedblleft/quotedblright/bullet/endash/emdash/tilde
/trademark/scaron/guilsinglright/oe/bullet/bullet
/Ydieresis/space/exclamdown/cent/sterling/currency
/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree
/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex
/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex
/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae
/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn
/ydieresis
/N31/Courier-Bold -1 TZ
% End encoding-delta
% Begin encoding-delta
[ 1 /dotlessi/caron 39 /quotesingle 96 /grave 127 /bullet/bullet
/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger
/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/bullet/bullet/bullet/quoteleft/quoteright
/quotedblleft/quotedblright/bullet/endash/emdash/tilde
/trademark/scaron/guilsinglright/oe/bullet/bullet
/Ydieresis/space/exclamdown/cent/sterling/currency
/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree
/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex
/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex
/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae
/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn
/ydieresis
/N51/Courier -1 TZ
% End encoding-delta
% Begin encoding-delta
[ 1 /dotlessi/caron 39 /quotesingle 96 /grave 127 /bullet/bullet
/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger
/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/bullet/bullet/bullet/quoteleft/quoteright
/quotedblleft/quotedblright/bullet/endash/emdash/tilde
/trademark/scaron/guilsinglright/oe/bullet/bullet
/Ydieresis/space/exclamdown/cent/sterling/currency
/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree
/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex
/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex
/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae
/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn
/ydieresis
/N38/Times-Roman -1 TZ
% End encoding-delta
% No more fonts or encodings past this point.
PDFVars/TermAll get exec end end
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 1 1
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (1 )]TJ
/N39 1 Tf
0 13.115 -13.115 0 90.39 131.909 Tm
-0.002 Tc
0.005 Tw
(14.  Practical Concurrency )Tj
/N38 1 Tf
0 8.743 -8.743 0 120.991 36.257 Tm
-0.007 Tc
0.017 Tw
(We begin our study of concurrency by describing how to use it in practic\e; later, in handout 17 )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
(on formal concurrency, we shall study it more formally. First we explain\ where the concurrency )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
(in a system comes from, and discuss the main ways to express concurrency\. Then we describe )Tj
0 -1.18 TD
(the difference between \221hard\222 and \221easy\222 concurrency)Tj
0 5.771 -5.771 0 149.494 220.392 Tm
0 Tc
0 Tw
(1)Tj
0 8.743 -8.743 0 151.768 223.365 Tm
-0.007 Tc
0.017 Tw
(: the latter is done by locking shared d)Tj
15.14 0 TD
0.005 Tc
(ata )Tj
-36.54 -1.16 TD
-0.004 Tc
0.014 Tw
[(before you touch it, the former in subtle ways that are so error-)-11 (prone that simple prudence )]TJ
T*
-0.006 Tc
0.016 Tw
(requires correctness proofs. We give the rules for easy concurrency usin\g locks, and discuss )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
(various issues that complicate the easy life: scheduling, locking granul\arity, and deadlocks. )Tj
/N39 1 Tf
0 10.142 -10.142 0 203.353 36.257 Tm
-0.004 Tc
0.013 Tw
(Sources of concurrency )Tj
/N38 1 Tf
0 8.743 -8.743 0 222.239 36.257 Tm
-0.007 Tc
0.017 Tw
(Before studying concurrency in detail, it seems useful to consider how y\ou might get )Tj
T*
-0.009 Tc
0.019 Tw
(concurrency in your system. Obviously if you have a multiprocessor or a \distributed system you )Tj
T*
-0.008 Tc
0.018 Tw
(will have concurrency, since in these systems there is more than one CPU\ executing instructions. )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
(Similarly, most hardware has separate parts that can change state simult\aneously and )Tj
T*
(independently. But suppose your system consists of a single CPU running \a program. Then you )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(can certainly arrange for concurrency by multiplexing that CPU among sev\eral tasks, but why )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(would you want to do this? Since the CPU can only execute one instructio\n at a time, it isn\222t )Tj
T*
(entirely obvious that there is any advantage to concurrency. Why not get\ one task done before )Tj
0 -1.18 TD
(moving on to the next one? )Tj
0 -1.9 TD
(There are only two possible reasons: )Tj
0 -1.92 TD
[(1.)-20 ( )-480 (A task might have to wait for something else to complete before it can p\roceed, for instance )]TJ
1.5 -1.18 TD
-0.004 Tc
0.014 Tw
(for a disk read. But this means that there is some concurrent task that \is going to complete, in )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
(the example an I/O device. So we have concurrency in any system that has\ I/O, even when )Tj
T*
-0.007 Tc
0.017 Tw
(there is only one CPU. )Tj
-1.5 -1.92 TD
-0.004 Tc
0.014 Tw
[(2.)-19 ( )-480 (Something else might have to wait for the result of one task but not for\ the rest of the )]TJ
1.5 -1.16 TD
(computation, for example a human user. But this means that there is some\ concurrent task )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
(that is waiting, in the example the user. Again we have concurrency in a\ny system that has )Tj
0 -1.16 TD
0.004 Tc
(I/O. )Tj
-1.5 -1.9 TD
-0.004 Tc
0.014 Tw
(In the first case one task must wait for I/O, and we can get more work d\one by running another )Tj
0 -1.18 TD
(task on the CPU, rather than letting it idle during the wait. Thus the c\oncurrency of the I/O )Tj
T*
-0.006 Tc
0.016 Tw
(system leads to concurrency on the CPU. If the I/O wait is explicit in t\he program, the )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
[(programmer can know when other tasks might run; this is often called a \221\non-)-14 (preemptive\222 )]TJ
T*
-0.009 Tc
0.019 Tw
(system, because it has sequential semantics except when the program expl\icitly allows )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
(concurrent activity by waiting. But if the I/O is done at some low level\ of abstraction, higher )Tj
0 -1.16 TD
-0.01 Tc
0.02 Tw
(levels may be quite unaware of it. The most insidious example of this is\ I/O caused by the virtual )Tj
T*
-0.009 Tc
0.019 Tw
(memory system: every instruction can cause a disk read. Such a system is\ called \221preemptive\222; )Tj
0 -3.18 TD
0.01 Tc
0 Tw
(                                               )Tj
ET
1 i
529.13 36.257 0.35 104.92 re
f 
BT
0 8.743 -8.743 0 531.403 141.177 Tm
0 Tc
( )Tj
0 5.771 -5.771 0 537.523 36.257 Tm
(1)Tj
0 7.344 -7.344 0 539.797 39.23 Tm
-0.003 Tc
0.015 Tw
[( I am indebted to Greg Nelson for this taxonomy, and for the object and \set example of deadlock avoidance. )]TJ
51.0238 68.2857 TD
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (2 )]TJ
0 8.743 -8.743 0 76.4 413.969 Tm
-0.004 Tc
0.014 Tw
(for practical purposes a task can lose the CPU at any point, since it\222\s too hard to predict which )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
(memory references might cause page faults. )Tj
0 -1.9 TD
-0.004 Tc
0.014 Tw
(In the second case we have a motivation for true preemption: we want som\e tasks to have higher )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(priority for the CPU than others. An important special case is interrupt\s, discussed below.  )Tj
0 -1.9 TD
(A concurrent program is harder to write than a sequential program, since\ there are many more )Tj
0 -1.18 TD
0.016 Tw
(possible paths of execution and interactions among the parts of the prog\ram. The canonical )Tj
0 -1.16 TD
0.015 Tw
(example is two concurrent executions of )Tj
/N51 1 Tf
0 7.344 -7.344 0 160.336 433.904 Tm
0 Tw
(x := x + 1 )Tj
/N38 1 Tf
0 8.743 -8.743 0 170.653 413.969 Tm
0.016 Tw
(Since this command is not atomic \(either in Spec, or in C on most compu\ters\), )Tj
/N51 1 Tf
0 7.344 -7.344 0 170.653 688.16 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 170.653 692.532 Tm
-0.007 Tc
0.017 Tw
[( can end up with )]TJ
-31.86 -1.18 TD
-0.006 Tc
(either )Tj
/N51 1 Tf
0 7.344 -7.344 0 180.97 435.828 Tm
0 Tc
0 Tw
(1)Tj
/N38 1 Tf
0 8.743 -8.743 0 180.97 440.199 Tm
0.012 Tc
-0.002 Tw
( or )Tj
/N51 1 Tf
0 7.344 -7.344 0 180.97 452.265 Tm
0 Tc
0 Tw
(2)Tj
/N38 1 Tf
0 8.743 -8.743 0 180.97 456.637 Tm
-0.005 Tc
0.015 Tw
(, depending on the order of execution of the expression evaluations and \the )Tj
-4.88 -1.16 TD
-0.007 Tc
0.017 Tw
(assignments. The interleaved order )Tj
0 7.344 -7.344 0 201.255 433.904 Tm
-0.003 Tc
(evaluate)Tj
/N51 1 Tf
3.3095 0 TD
-0.005 Tc
0 Tw
( x + 1 )Tj
/N38 1 Tf
-3.3333 -1.2381 TD
-0.003 Tc
(evaluate)Tj
/N51 1 Tf
3.3095 0 TD
-0.005 Tc
( x + 1 )Tj
-3.3095 -1.119 TD
(x := result )Tj
0 -1.1429 TD
(x := result )Tj
/N38 1 Tf
0 8.743 -8.743 0 237.277 413.969 Tm
-0.013 Tc
(leaves )Tj
/N51 1 Tf
0 7.344 -7.344 0 237.277 437.401 Tm
-0.005 Tc
(x = 1)Tj
/N38 1 Tf
0 8.743 -8.743 0 237.277 459.26 Tm
0.015 Tw
(, while doing both steps of one command before either step of the other \leaves )Tj
/N51 1 Tf
0 7.344 -7.344 0 247.42 413.969 Tm
0 Tw
(x = 2)Tj
/N38 1 Tf
0 8.743 -8.743 0 247.42 435.828 Tm
0.01 Tc
(. )Tj
-2.5 -1.9 TD
-0.006 Tc
0.016 Tw
(So it\222s best to avoid concurrency unless you really needed it for one\ of the reasons just )Tj
0 -1.18 TD
(discussed.)Tj
0 5.771 -5.771 0 272.076 449.117 Tm
0 Tc
0 Tw
(2)Tj
0 8.743 -8.743 0 274.349 452.09 Tm
0.01 Tc
(  )Tj
-4.36 -1.92 TD
-0.003 Tc
0.013 Tw
(One good thing about concurrency, on the other hand, is that when you wr\ite a program as a set )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(of concurrent computations, you can defer decisions about exactly how to\ schedule them. )Tj
/N39 1 Tf
0 10.142 -10.142 0 322.437 413.969 Tm
-0.004 Tc
0.013 Tw
(Ways to package concurrency )Tj
/N38 1 Tf
0 8.743 -8.743 0 341.323 413.969 Tm
-0.007 Tc
0.017 Tw
[(In the last section we used the work \221task\222 informally to describe\ a more-)-14 (o)-20 (r)-20 (-)-14 (less independent, )]TJ
0 -1.18 TD
-0.006 Tc
0.016 Tw
[(more-)-13 (o)-20 (r)-20 (-)-13 (less sequential part of a computation. Now we shall be less coy about ho\w concurrency )]TJ
0 -1.16 TD
-0.009 Tc
0.019 Tw
(shows up in a system. )Tj
0 -1.92 TD
-0.006 Tc
0.016 Tw
(The most general way to describe a concurrent system is in terms of a se\t of atomic actions with )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
(the property that usually more than one of them can occur \(is enabled\)\; we will use this )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
[(viewpoint in our later study of formal concurrency. In practice, however\, we usually think in )]TJ
0 -1.16 TD
-0.007 Tc
0.017 Tw
(terms of several \221threads\222 of concurrent execution. Within a singl\e thread only one action is )Tj
T*
-0.008 Tc
0.018 Tw
(enabled at a time; in general one action may be enabled from each thread\, though often some of )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(the threads are waiting or \221blocked\222, that is, have no enabled act\ions. )Tj
0 -1.9 TD
(The most convenient way to do concurrent programming is in a system that\ allows each thread to )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
[(be described as an execution path in an ordinary-)-14 (looking program with modules, routines, )]TJ
0 -1.16 TD
-0.004 Tc
0.014 Tw
(commands, etc., such as Spec, C, or Java. In this scheme more than one t\hread can execute the )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(code of the same procedure; threads have local state that is the local v\ariables of the procedures )Tj
0 -3.48 TD
0.01 Tc
0 Tw
(                                               )Tj
ET
505.173 413.969 0.35 104.92 re
f 
BT
0 8.743 -8.743 0 507.446 518.889 Tm
0 Tc
( )Tj
0 5.771 -5.771 0 513.567 413.969 Tm
(2)Tj
0 7.344 -7.344 0 515.84 416.942 Tm
-0.003 Tw
( This is the main reason why threads with RPC or synchronous messages ar\e good, and asynchronous messages are )Tj
-0.4048 -1.0952 TD
-0.002 Tc
0.014 Tw
(bad. The latter force you to have concurrency whenever you have communic\ation, while the former let you put in )Tj
0 -1.0714 TD
(the concurrency just where you really need it. Of course if the implemen\tation of threads is clumsy or expensive, as )Tj
0 -1.0952 TD
0.001 Tc
0.011 Tw
(it often is, that may overwhelm the inherent advantages. )Tj
ET
PDFVars/TermAll get exec end end
restore
gsave showpage grestore
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 2 2
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (3 )]TJ
0 8.743 -8.743 0 76.4 36.257 Tm
-0.008 Tc
0.018 Tw
(they are executing. All the languages mentioned and many others allow yo\u to program in this )Tj
0 -1.18 TD
-0.009 Tc
(way. )Tj
0 -1.9 TD
-0.006 Tc
0.016 Tw
[(In fault-)-13 (tolerant systems there is a conceptual drawback to this thread model. If\ a failure can )]TJ
0 -1.18 TD
(occur after each atomic command, it is hard to understand the program by\ following the )Tj
0 -1.16 TD
0.015 Tw
(sequential flow of control in a thread, because there are so many other \paths that result from )Tj
T*
-0.007 Tc
0.017 Tw
(failure and recovery. In these systems it is often best to reason strict\ly in terms of independent )Tj
0 -1.18 TD
-0.01 Tc
0.02 Tw
(atomic actions. We will see detailed examples of this when we study reli\able messages, )Tj
0 -1.16 TD
-0.006 Tc
0.016 Tw
(consensus, and replication. Applications programmed in a transaction sys\tem are another )Tj
T*
-0.008 Tc
0.018 Tw
(example of this approach: each application runs in response to some inpu\t and is a single atomic )Tj
0 -1.18 TD
-0.002 Tc
(action. )Tj
0 -1.9 TD
-0.006 Tc
0.016 Tw
(The biggest drawback of this kind of \221official\222 thread, however, i\s the costs of representing the )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(local state and call stack of each thread and of a general mechanism for\ scheduling the threads. )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
(There are several alternatives that reduce these costs: interrupts, cont\rol blocks, and SIMD )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(computers. They are all based on restricting the freedom of a thread to \block, that is, to yield the )Tj
0 -1.16 TD
-0.009 Tc
0.019 Tw
(processor until some external condition is satisfied, for example, until\ there is space in a buffer )Tj
T*
-0.008 Tc
0.018 Tw
(or until a lock is free. )Tj
/N22 1 Tf
0 -2.18 TD
-0.002 Tc
(Interrupts )Tj
/N38 1 Tf
0 -1.9 TD
-0.004 Tc
0.014 Tw
[(An interrupt routine is not the same as a thread, because it always star\ts at the same point and )]TJ
0 -1.18 TD
-0.002 Tc
0.012 Tw
(cannot wait for another thread. The reason for these restrictions is tha\t the execution context for )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(an interrupt routine is allocated on someone else\222s stack, which mean\s that the routine must )Tj
T*
-0.002 Tc
0.012 Tw
(complete before the thread that it interrupted can continue to run. On t\he other hand, the )Tj
0 -1.18 TD
-0.006 Tc
0.016 Tw
(hardware that schedules an interrupt routine is efficient and takes acco\unt of priority within )Tj
0 -1.16 TD
0.015 Tw
(certain limits. In addition, the interrupt routine doesn\222t pay the co\st of its own stack like an )Tj
T*
-0.004 Tc
0.014 Tw
(ordinary thread.  )Tj
0 -1.92 TD
-0.007 Tc
0.017 Tw
(It\222s possible to have a hybrid system in which an interrupt routine t\hat needs to wait turns itself )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(into an ordinary thread by copying its state. This is tricky if the wait\ happens in a subroutine of )Tj
0 -1.16 TD
-0.006 Tc
0.016 Tw
(the main interrupt routine, since the relevant state may be spread acros\s several stack frames. If )Tj
T*
-0.002 Tc
0.012 Tw
(the copying doesn\222t happen too often, the interrupt-)Tj
20.6 0 TD
-0.013 Tc
0.023 Tw
(thread hybrid is efficient. The main )Tj
-20.6 -1.18 TD
-0.006 Tc
0.016 Tw
[(drawbacks are that the copying usually has to be done by hand, which is \error-)-13 (prone, and that )]TJ
0 -1.16 TD
0.015 Tw
(without compiler and runtime support it\222s not possible to reconstruct\ the call stack, which means )Tj
T*
-0.003 Tc
0.013 Tw
(that the thread has to be structured differently from the interrupt rout\ine. )Tj
0 -1.92 TD
-0.008 Tc
0.018 Tw
(A simpler strategy that is widely used is to limit the work in the inter\rupt routine to simple things )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
[(that don\222t require waits, and to wake up a thread to do anything more\ complicated. )]TJ
/N22 1 Tf
0 -2.18 TD
0.012 Tw
(Control blocks and message queues )Tj
/N38 1 Tf
0 -1.9 TD
-0.004 Tc
0.014 Tw
(Another, related strategy is to package all the permanent state of a thr\ead, including its program )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
(counter, in a record \(usually called a \221control block\222\) and to e\xplicitly schedule the execution of )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
(the threads. When a thread runs, it starts at the saved program counter \\(usually a procedure entry )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
[(point\) and runs until it explicitly gives up control or \221yields\222.\ During execution it can call)29 ( )]TJ
0 -1.16 TD
-0.004 Tc
0.014 Tw
(procedures, but when it yields its stack must be empty so that there\222\s no need to save it, because )Tj
T*
-0.006 Tc
0.016 Tw
(all the state has to be in the control block. When it yields, a referenc\e to the control block is )Tj
0 7.344 -7.344 0 38.279 413.969 Tm
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.619 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (4 )]TJ
0 8.743 -8.743 0 76.4 413.969 Tm
-0.003 Tc
0.013 Tw
(saved where some other thread or interrupt routine can find it and queue\ the thread for execution )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(when it\222s ready to run, for instance after an I/O operation is comple\te.)Tj
0 5.771 -5.771 0 84.444 656.859 Tm
0 Tc
0 Tw
(3)Tj
0 8.743 -8.743 0 86.717 659.832 Tm
( )Tj
-28.12 -1.9 TD
-0.003 Tc
0.013 Tw
(The advantages of this approach are similar to those of interrupts: ther\e are no stacks to manage, )Tj
0 -1.18 TD
-0.01 Tc
0.02 Tw
(and scheduling can be carefully tuned to the application. The main drawb\ack is also similar: a )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
(thread must unwind its stack before it can wait. In particular, it canno\t wait to acquire a lock at )Tj
T*
-0.006 Tc
0.016 Tw
(an arbitrary point in the program. )Tj
0 -1.92 TD
-0.008 Tc
0.018 Tw
(It is very common to implement the I/O system of an operating system usi\ng this kind of thread. )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(Most people who are used to this style do not realize that it is a restr\icted, though efficient, case )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
(of general programming with threads.  )Tj
0 -1.9 TD
-0.006 Tc
0.016 Tw
(In \221active messages\222, a recent variant of this scheme, you break y\our computation down i)Tj
35.34 0 TD
0.007 Tc
(nto )Tj
-35.34 -1.18 TD
-0.006 Tc
[(non-)-13 (blocking segments; as the end of a segment, you package the state into a\n \221active message\222 )]TJ
0 -1.16 TD
-0.004 Tc
0.014 Tw
(and send it to the agent that can take the next step. Incoming messages \are queued until the )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
(receiver has finished processing earlier ones.)Tj
0 5.771 -5.771 0 216.293 567.852 Tm
0 Tc
0 Tw
(4)Tj
0 8.743 -8.743 0 218.566 570.825 Tm
( )Tj
-17.94 -1.9 TD
-0.004 Tc
0.014 Tw
[(There are lots of other ways to use the control block idea. In \221sched\uler activations\222, for example, )]TJ
0 -1.18 TD
-0.005 Tc
0.015 Tw
(kernel operations are defined so that they always run to completion; if \an operation can\222t do what )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
(was requested, it returns intermediate state and can be retried later.)Tj
0 5.771 -5.771 0 253.365 646.891 Tm
0 Tc
0 Tw
(5)Tj
0 8.743 -8.743 0 255.638 649.864 Tm
-0.009 Tc
0.019 Tw
[( In \221message queuing\222 )]TJ
-26.98 -1.18 TD
-0.004 Tc
0.014 Tw
(systems, the record of the thread state is stored in a persistent queue \whenever it moves from one )Tj
0 -1.16 TD
-0.002 Tc
0.012 Tw
(module to another, and a transaction is used to take the state off one q\ueue, do some processing, )Tj
T*
-0.004 Tc
0.014 Tw
(and put it back onto another queue. This means that the thread can conti\nue execution in spite of )Tj
0 -1.18 TD
-0.013 Tc
0.023 Tw
(failures in machines or communication links.)Tj
0 5.771 -5.771 0 294.284 567.677 Tm
0 Tc
0 Tw
(6)Tj
0 8.743 -8.743 0 296.557 570.65 Tm
0.01 Tc
(  )Tj
/N22 1 Tf
-17.92 -2.16 TD
-0.001 Tc
0.011 Tw
[(SIMD or data-)-8 (parallel computing )]TJ
/N38 1 Tf
0 -1.9 TD
-0.007 Tc
0.017 Tw
(This acronym stands for \221single instruction, multiple data\222, and r\efers to processors in which )Tj
0 -1.18 TD
[(several execution units all execute the same sequence of instructions on\ different data values. In )]TJ
0 -1.16 TD
(a \221pure\222 SIMD machine every instruction is executed at the same ti\me by all the processors )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
[(\(except that some of them might be disabled for that instruction\). Eac\h processor has its own )]TJ
0 -1.16 TD
0.016 Tw
(memory, and the processors can exchange data as part of an instruction. \A few such machines )Tj
T*
-0.003 Tc
0.013 Tw
(were built between 1970 and 1993, but they are now out of favor.)Tj
0 5.771 -5.771 0 380.843 642.87 Tm
0 Tc
0 Tw
(7)Tj
0 8.743 -8.743 0 383.116 645.842 Tm
-0.01 Tc
0.02 Tw
[( The same programming )]TJ
-26.52 -1.18 TD
-0.011 Tc
0.021 Tw
(paradigm is still used in many scientific problems however, at a coarser\ grain, and is called )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
[(\221data-)-11 (parallel\222 computing. In one step each processor does some computation\ on its private data. )]TJ
T*
-0.006 Tc
0.016 Tw
(When all of them are done, they exchange some data and then take the nex\t step. The action of )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(detecting that all are done is called \221barrier synchronization\222.  \)Tj
0 -4.04 TD
0.01 Tc
0 Tw
(                                               )Tj
ET
1 i
457.085 413.969 0.35 104.92 re
f 
BT
0 8.743 -8.743 0 459.358 518.889 Tm
0 Tc
( )Tj
0 5.771 -5.771 0 465.478 413.969 Tm
(3)Tj
0 7.344 -7.344 0 467.752 416.942 Tm
0.012 Tw
[( H. Lauer and R. Needham. On the duality of operating system structures.\ )]TJ
/N22 1 Tf
29.881 0 TD
0.001 Tc
(Second Int. Symposium on Operating )Tj
-30.2857 -1.0952 TD
0 Tc
(Systems)Tj
/N38 1 Tf
3.1667 0 TD
0.001 Tc
(, IRIA, Rocquencourt, France, Oct. 1978 \(reprinted in )Tj
/N22 1 Tf
21.9524 0 TD
0 Tc
(Operating Systems Review )Tj
/N39 1 Tf
10.9524 0 TD
(13)Tj
/N22 1 Tf
1 0 TD
0.006 Tc
(,2 )Tj
/N38 1 Tf
1.0238 0 TD
0.003 Tc
0.009 Tw
(\(April 1979\), 3-19\).  )Tj
0 5.771 -5.771 0 481.391 413.969 Tm
0 Tc
0 Tw
(4)Tj
0 7.344 -7.344 0 483.664 416.942 Tm
0.001 Tc
0.011 Tw
[( T. von Eiken et al., Active messages: A mechanism for integrated commun\ication and computation. )]TJ
/N22 1 Tf
40.7381 0 TD
-0.001 Tc
(Proc. )Tj
-41.1429 -1.0952 TD
0.002 Tc
0.01 Tw
(International Symposium on Computer Architecture)Tj
/N38 1 Tf
20.9524 0 TD
-0.001 Tc
0.013 Tw
(, May 1992, pp 256-267. )Tj
0 5.771 -5.771 0 497.479 413.969 Tm
0 Tc
0 Tw
(5)Tj
0 7.344 -7.344 0 499.752 416.942 Tm
0.012 Tw
[( T. Anderson et al., Scheduler activations: Effective kernel support for\ the user-level management of parallelism. )]TJ
/N22 1 Tf
-0.4048 -1.0952 TD
(ACM Transactions on Computer systems)Tj
/N38 1 Tf
16.4286 0 TD
0 Tw
( )Tj
/N39 1 Tf
0.2619 0 TD
(10)Tj
/N38 1 Tf
1 0 TD
0.012 Tw
(, 1 \(Feb. 1992\), pp 54-79. )Tj
0 5.771 -5.771 0 513.567 413.969 Tm
0 Tw
(6)Tj
0 7.344 -7.344 0 515.84 416.942 Tm
-0.013 Tc
0.025 Tw
[( See )]TJ
0 0 1 rg
1.9286 0 TD
-0.008 Tc
(www.messageq.com)Tj
ET
516.714 431.106 0.35 59.804 re
f 
BT
0 7.344 -7.344 0 515.84 490.911 Tm
0 0 0 rg
0.003 Tc
0.009 Tw
[( or A. Dickman, )]TJ
/N22 1 Tf
6.8095 0 TD
0.001 Tc
0.011 Tw
(Designing Applications With Msmq: Message Queuing for Developers)Tj
/N38 1 Tf
28.381 0 TD
0.012 Tc
(, )Tj
-45.6667 -1.0952 TD
-0.004 Tc
0.016 Tw
(Addison-Wesley, 1998. )Tj
0 5.771 -5.771 0 529.48 413.969 Tm
0 Tc
0 Tw
(7)Tj
0 7.344 -7.344 0 531.753 416.942 Tm
0.001 Tc
0.011 Tw
[( The term \221SIMD\222 has been recycled in the Intel MMX instruction se\t, and similar designs from several other )]TJ
-0.4048 -1.0952 TD
0.002 Tc
0.01 Tw
(manufacturers, to describe something much more prosaic: doing 8 8-bit ad\ds in parallel on a 64-bit data path. )Tj
ET
PDFVars/TermAll get exec end end
restore
gsave showpage grestore
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 3 3
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (5 )]TJ
/N39 1 Tf
0 10.142 -10.142 0 76.4 36.257 Tm
-0.003 Tc
0.012 Tw
(Easy concurrency )Tj
/N38 1 Tf
0 8.743 -8.743 0 95.286 36.257 Tm
-0.008 Tc
0.018 Tw
(Concurrency is easy when you program with locks. The rules are simple:  \)Tj
/N23 1 Tf
0 -1.92 TD
0 Tc
(\267 )Tj
/N38 1 Tf
1.5 0 TD
-0.009 Tc
0.019 Tw
(Every shared variable must be protected by a lock. A variable is shared \if it is touched by )Tj
0 -1.18 TD
-0.003 Tc
0.013 Tw
(more than one thread. You can think of data that is private to a thread \as being protected by )Tj
0 -1.16 TD
-0.011 Tc
0.021 Tw
(an implicit lock that is always held by the thread. )Tj
/N23 1 Tf
-1.5 -1.9 TD
0 Tc
(\267 )Tj
/N38 1 Tf
1.5 0 TD
-0.007 Tc
0.017 Tw
(You must hold the lock for a shared variable before you touch the variab\le. The essential )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(property of a lock is that two threads can\222t hold the same lock at th\e same time. This property )Tj
T*
-0.01 Tc
0.02 Tw
(is called \221mutual exclusion\222; the abbreviation \221mutex\222 is an\other name for a lock. )Tj
/N23 1 Tf
-1.5 -1.9 TD
0 Tc
(\267 )Tj
/N38 1 Tf
1.5 0 TD
-0.006 Tc
0.016 Tw
(If you want an atomic operation on several shared variables that are pro\tected by different )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
[(locks, you must not release any locks until you are done. This is called\ \221two-)-14 (phase locking\222, )]TJ
0 -1.16 TD
-0.009 Tc
0.019 Tw
(because there is a phase in which you only acquire locks and don\222t re\lease any, followed by a )Tj
T*
-0.01 Tc
0.02 Tw
(phase in which you only release locks and don\222t acquire any. )Tj
-1.5 -1.92 TD
-0.004 Tc
0.014 Tw
(Then your computation between the point that you acquire a lock and the \point that you release it )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
(is equivalent to a single atomic action, and therefore you can reason ab\out it sequentially. This )Tj
0 -1.16 TD
(atomic part of the computation is called a \221critical section\222. To \use this method reliably, you )Tj
T*
-0.005 Tc
0.015 Tw
(should annotate each shared variable with the name of the lock that prot\ects it, and clearly )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(bracket the regions of your program within which you hold each lock. The\n it is a mechanical )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
(process to check that you hold the proper lock whenever you touch a shar\ed variable. It\222s also )Tj
T*
-0.01 Tc
0.02 Tw
[(p)-20 (o)-20 (ssible to check a running program for violations of this discipline.)]TJ
0 5.771 -5.771 0 292.71 271.628 Tm
0 Tc
0 Tw
(8)Tj
0 8.743 -8.743 0 294.983 274.601 Tm
( )Tj
-27.26 -1.92 TD
-0.007 Tc
0.017 Tw
[(Why do locks lead to big atomic actions? Intuitively, the reason is that\ no other well-)-14 (behaved )]TJ
0 -1.16 TD
-0.008 Tc
0.018 Tw
[(thread can touch any shared variable while you hold its lock, because a \well-)-15 (behaved thread )]TJ
0 -1.18 TD
-0.007 Tc
0.017 Tw
(won\222t touch a shared variable without itself holding its lock, and on\ly one thread can hold a lock )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
(at a time. We will make this more precise in handout 17 on formal concur\rency, and give a proof )Tj
T*
(of atomicity. )Tj
0 -1.92 TD
-0.01 Tc
0.02 Tw
[(Actually locks give you a bit more atomicity than this. If a well-)-17 (behaved thread acquires a )]TJ
0 -1.18 TD
-0.007 Tc
0.017 Tw
(sequence of locks and then releases them \(not necessarily in the same o\rder\), the entire )Tj
0 -1.16 TD
-0.006 Tc
0.016 Tw
(computation from the first acquire to the last release is atomic. Once y\ou have done a release, )Tj
T*
-0.004 Tc
0.014 Tw
(however, you can\222t do another acquire without losing atomicity. )Tj
0 -1.92 TD
-0.01 Tc
0.02 Tw
(The simple locks we have been describing are also called \221mutexes\222\; this is short for \223mutual )Tj
0 -1.16 TD
-0.009 Tc
0.019 Tw
(exclusion\224. As we shall see, more complicated kinds of locks are ofte\n useful. )Tj
0 -1.92 TD
(Here is the spec for a mutex. It maintains mutual exclusion by allowing \the mutex to be acquired )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(only when no one already holds it. If a thread other than the current ho\lder releases the mutex, )Tj
0 -1.16 TD
0.016 Tw
(the result is undefined. If you try to do an )Tj
/N51 1 Tf
0 7.344 -7.344 0 464.079 182.796 Tm
(Acquire)Tj
/N38 1 Tf
0 8.743 -8.743 0 464.079 213.397 Tm
0.015 Tw
[( when the mutex is not free, you have to wait, )]TJ
-20.26 -1.16 TD
-0.015 Tc
(since )Tj
/N51 1 Tf
0 7.344 -7.344 0 474.222 55.842 Tm
-0.005 Tc
(Acquire)Tj
/N38 1 Tf
0 8.743 -8.743 0 474.222 86.444 Tm
-0.004 Tc
0.014 Tw
[( has no transition from that state because of the )]TJ
/N51 1 Tf
0 7.344 -7.344 0 474.222 253.092 Tm
-0.005 Tc
0 Tw
(m = nil)Tj
/N38 1 Tf
0 8.743 -8.743 0 474.222 283.694 Tm
0.002 Tc
0.008 Tw
[( guard. )]TJ
-28.3 -5.64 TD
0.01 Tc
0 Tw
(                                               )Tj
ET
1 i
521.261 36.257 0.35 104.92 re
f 
BT
0 8.743 -8.743 0 523.534 141.177 Tm
0 Tc
( )Tj
0 5.771 -5.771 0 529.48 36.257 Tm
(8)Tj
0 7.344 -7.344 0 531.753 39.23 Tm
0.002 Tc
-0.014 Tw
[( S. Savage et al. Eraser: A dynamic data )12 (race )12 (detector )12 (for )12 (multithreaded )12 (programs. )]TJ
/N22 1 Tf
33.0476 0 TD
0 Tc
-0.024 Tw
(ACM Transactions on Computer )Tj
-33.4524 -1.0952 TD
(Systems)Tj
/N38 1 Tf
3.1667 0 TD
0 Tw
( )Tj
/N39 1 Tf
0.2619 0 TD
(15)Tj
/N38 1 Tf
1 0 TD
0.012 Tw
(, 4 \(Dec 1997\), pp 391-411. )Tj
47 68.2857 TD
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (6 )]TJ
/N31 1 Tf
0 8.743 -8.743 0 76.575 413.969 Tm
0 Tc
0 Tw
(MODULE Mutex)Tj
/N51 1 Tf
7.2 0 TD
( )Tj
0 7.344 -7.344 0 76.575 482.167 Tm
-0.005 Tc
(EXPORT acq, rel = )Tj
/N38 1 Tf
22.8571 0 TD
-0.002 Tc
0.014 Tw
(% Acquire and Release)Tj
/N39 1 Tf
9.3571 0 TD
0 Tc
0 Tw
( )Tj
/N51 1 Tf
-41.5 -2.0952 TD
-0.005 Tc
[(VAR )-310 (m: \(Thread + Null\) := nil )]TJ
/N38 1 Tf
0 -1.2143 TD
0.002 Tc
0.01 Tw
(% A mutex is either )Tj
/N51 1 Tf
8.3333 0 TD
-0.005 Tc
(nil)Tj
/N38 1 Tf
1.7857 0 TD
0.005 Tc
0.007 Tw
[( or the thread holding the mutex.)]TJ
/N51 1 Tf
13.2857 0 TD
0 Tc
0 Tw
( )Tj
/N38 1 Tf
-23.4048 -1.2381 TD
0.001 Tc
0.011 Tw
(% The variable )Tj
/N51 1 Tf
6.4048 0 TD
-0.005 Tc
(SELF)Tj
/N38 1 Tf
2.381 0 TD
0.003 Tc
0.009 Tw
[( is defined to be the thread currently making a transition.)]TJ
/N51 1 Tf
22.9524 0 TD
0 Tc
0 Tw
( )Tj
-31.7381 -2 TD
-0.005 Tc
(APROC acq\(\) = << m = nil  => m := SELF; RET >> )Tj
0 -1.1429 TD
(APROC rel\(\) = << m = SELF => m := nil ; RET [*] HAVOC >> )Tj
0 -2 TD
(END Mutex )Tj
/N38 1 Tf
0 8.743 -8.743 0 164.708 413.969 Tm
0.016 Tw
(We usually need lots of mutexes, not just one, so we change )Tj
/N51 1 Tf
0 7.344 -7.344 0 164.708 625.208 Tm
(MODULE)Tj
/N38 1 Tf
0 8.743 -8.743 0 164.708 651.438 Tm
0.021 Tc
-0.011 Tw
[( to )]TJ
/N51 1 Tf
0 7.344 -7.344 0 164.708 663.154 Tm
-0.005 Tc
(CLASS)Tj
/N38 1 Tf
0 8.743 -8.743 0 164.708 685.013 Tm
-0.004 Tc
0.014 Tw
[( \(see section 7 of )]TJ
-31 -1.18 TD
-0.009 Tc
0.019 Tw
[(hando)-10 (ut 4, the)-10 ( Spec reference manual\). This creates a module with a function variable\ in which )]TJ
0 -1.16 TD
0 Tc
0.01 Tw
(to store the state of lots of mutexes, and a )Tj
/N51 1 Tf
0 7.344 -7.344 0 185.167 562.256 Tm
-0.005 Tc
(Mutex)Tj
/N38 1 Tf
0 8.743 -8.743 0 185.167 584.115 Tm
-0.008 Tc
0.018 Tw
[( type with )]TJ
/N51 1 Tf
0 7.344 -7.344 0 185.167 621.011 Tm
-0.005 Tc
(new)Tj
/N38 1 Tf
0 8.743 -8.743 0 185.167 634.126 Tm
0.01 Tc
(, )Tj
/N51 1 Tf
0 7.344 -7.344 0 185.167 638.673 Tm
-0.005 Tc
(acq)Tj
/N38 1 Tf
0 8.743 -8.743 0 185.167 651.788 Tm
-0.004 Tc
0.014 Tw
(, and )Tj
/N51 1 Tf
0 7.344 -7.344 0 185.167 671.023 Tm
-0.005 Tc
(rel)Tj
/N38 1 Tf
0 8.743 -8.743 0 185.167 684.138 Tm
-0.004 Tc
[( methods whose )]TJ
-30.9 -1.16 TD
-0.011 Tc
0.021 Tw
(value indexes the variable. )Tj
/N22 1 Tf
0 -2.18 TD
-0.001 Tc
(Invariants )Tj
/N38 1 Tf
0 -1.9 TD
-0.007 Tc
0.017 Tw
(In fact things are not so simple, since a computation seldom consists of\ a single atomic action. A )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(thread should not hold a lock forever \(except on private data\) because\ that will prevent any other )Tj
0 -1.16 TD
-0.002 Tc
0.012 Tw
(thread that needs to touch the data from making progress. Furthermore, i\t often happens that a )Tj
T*
0.013 Tw
(thread can\222t make progress until some other thread changes the data p\rotected by a lock. A )Tj
0 -1.18 TD
-0.011 Tc
0.021 Tw
(simple example of this is a FIFO buffer, in which a consumer thread doin\g a )Tj
/N51 1 Tf
0 7.344 -7.344 0 271.901 678.892 Tm
-0.005 Tc
(Get)Tj
/N38 1 Tf
0 8.743 -8.743 0 271.901 692.007 Tm
-0.009 Tc
0.019 Tw
[( on an empty )]TJ
-31.8 -1.16 TD
-0.004 Tc
0.014 Tw
(buffer must wait until some other producer thread does a )Tj
/N51 1 Tf
0 7.344 -7.344 0 282.043 613.842 Tm
-0.005 Tc
(Put)Tj
/N38 1 Tf
0 8.743 -8.743 0 282.043 626.957 Tm
0.004 Tc
0.006 Tw
(. In order for the producer to get )Tj
-24.36 -1.16 TD
-0.004 Tc
0.014 Tw
(access to the data, the consumer must release the lock. Atomicity does n\ot apply to code like this )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(that touches a shared variable )Tj
/N51 1 Tf
0 7.344 -7.344 0 302.503 518.889 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 302.503 523.261 Tm
-0.003 Tc
0.013 Tw
[( protected by a mutex )]TJ
/N51 1 Tf
0 7.344 -7.344 0 302.503 601.251 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 302.503 605.623 Tm
0.002 Tc
(: )Tj
/N51 1 Tf
0 7.344 -7.344 0 311.945 433.904 Tm
-0.005 Tc
(m.acq; touch x; m.rel; private computation; m.acq; touch x; m.rel )Tj
/N38 1 Tf
0 8.743 -8.743 0 322.437 413.969 Tm
0.015 Tw
[(This code releases a lock and later re-)-12 (acquires it, and therefore isn\222t atomic. So we need a )]TJ
0 -1.16 TD
0.016 Tw
(different way to think about this situation, and here it is.  )Tj
1.5 -2.04 TD
-0.004 Tc
0.014 Tw
(After the )Tj
/N51 1 Tf
0 7.344 -7.344 0 350.416 460.484 Tm
-0.005 Tc
(m.acq)Tj
/N38 1 Tf
0 8.743 -8.743 0 350.416 482.342 Tm
-0.008 Tc
0.018 Tw
[( the only thing you can assume about )]TJ
/N51 1 Tf
0 7.344 -7.344 0 350.416 613.142 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 350.416 617.514 Tm
-0.009 Tc
0.019 Tw
[( is an invariant that holds whenever )]TJ
/N51 1 Tf
0 7.344 -7.344 0 350.416 742.194 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 350.416 746.566 Tm
( )Tj
ET
341.148 422.887 0.35 0.35 re
f 
341.148 422.887 0.35 0.35 re
f 
341.148 423.237 0.35 335.569 re
f 
341.148 758.806 0.35 0.35 re
f 
341.148 758.806 0.35 0.35 re
f 
341.498 422.887 10.842 0.35 re
f 
341.498 758.806 10.842 0.35 re
f 
BT
0 8.743 -8.743 0 360.558 427.084 Tm
-0.008 Tc
0.018 Tw
(is unlocked.  )Tj
ET
363.356 422.887 0.35 0.35 re
f 
363.356 422.887 0.35 0.35 re
f 
363.356 423.237 0.35 335.569 re
f 
363.356 758.806 0.35 0.35 re
f 
363.356 758.806 0.35 0.35 re
f 
352.34 422.887 11.017 0.35 re
f 
352.34 758.806 11.017 0.35 re
f 
BT
0 8.743 -8.743 0 378.395 413.969 Tm
-0.01 Tc
0.02 Tw
(As usual, the invariant must be true initially, and the program must est\ablish it before unlocking )Tj
/N51 1 Tf
0 7.344 -7.344 0 388.712 413.969 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 388.712 418.341 Tm
-0.019 Tc
0.029 Tw
(. While )Tj
/N51 1 Tf
0 7.344 -7.344 0 388.712 445.445 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 388.712 449.817 Tm
-0.006 Tc
0.016 Tw
[( is locked, you can poke around in )]TJ
/N51 1 Tf
0 7.344 -7.344 0 388.712 571.349 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 388.712 575.721 Tm
-0.007 Tc
0.017 Tw
[( and discover facts that are not implied by the )]TJ
-18.5 -1.16 TD
-0.006 Tc
0.016 Tw
(invariant, but you cannot assume that any of these facts are still true \after you unlock )Tj
/N51 1 Tf
0 7.344 -7.344 0 398.854 710.893 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 398.854 715.264 Tm
0.01 Tc
(.  )Tj
-34.46 -1.9 TD
-0.006 Tc
0.016 Tw
(To use this methodology effectively, of course, you must )Tj
/N22 1 Tf
22.86 0 TD
0.015 Tw
(write the invariant down)Tj
/N38 1 Tf
9.78 0 TD
0.01 Tc
(. )Tj
-32.64 -1.92 TD
-0.006 Tc
0.016 Tw
(Here is a more picturesque way of describing this method. To do easy con\current programming:  )Tj
1.5 -1.92 TD
-0.007 Tc
0.017 Tw
(first you put your hand over some shared variables, say )Tj
/N51 1 Tf
0 7.344 -7.344 0 449.041 620.487 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 449.041 624.858 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 449.041 641.82 Tm
0 Tc
0 Tw
(y)Tj
/N38 1 Tf
0 8.743 -8.743 0 449.041 646.192 Tm
-0.003 Tc
0.013 Tw
[(,  so that they can\222t change,  )]TJ
-25.06 -1.92 TD
-0.007 Tc
0.017 Tw
(then you do something with them, and  )Tj
T*
-0.012 Tc
0.022 Tw
(finally you take your hand away.  )Tj
-1.5 -1.92 TD
-0.003 Tc
0.013 Tw
(The reason )Tj
/N51 1 Tf
0 7.344 -7.344 0 499.403 454.713 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 499.403 459.085 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 499.403 476.047 Tm
0 Tc
0 Tw
(y)Tj
/N38 1 Tf
0 8.743 -8.743 0 499.403 480.419 Tm
-0.006 Tc
0.016 Tw
[( can\222t change is that the rest of the program obeys some conventions;\ in )]TJ
-7.6 -1.16 TD
0.015 Tw
(particular, it acquires locks before touching shared variables. There ar\e other, trickier )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(conventions that can keep )Tj
/N51 1 Tf
0 7.344 -7.344 0 519.862 506.299 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 519.862 510.67 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 519.862 527.632 Tm
0 Tc
0 Tw
(y)Tj
/N38 1 Tf
0 8.743 -8.743 0 519.862 532.004 Tm
-0.01 Tc
0.02 Tw
[( from changing; we will see some of them later on. )]TJ
ET
PDFVars/TermAll get exec end end
restore
gsave showpage grestore
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 4 4
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (7 )]TJ
0 8.743 -8.743 0 76.4 36.257 Tm
-0.009 Tc
0.019 Tw
[(This viewpoint sheds light on why fault-)-16 (tolerant programming is hard: )]TJ
/N51 1 Tf
0 7.344 -7.344 0 76.4 281.245 Tm
-0.005 Tc
(Crash)Tj
/N38 1 Tf
0 8.743 -8.743 0 76.4 303.104 Tm
-0.003 Tc
0.013 Tw
[( is no respecter of )]TJ
-30.52 -1.18 TD
-0.008 Tc
0.018 Tw
[(conventions, and the invariant must be maintained even though a )]TJ
/N51 1 Tf
0 7.344 -7.344 0 86.717 262.71 Tm
-0.005 Tc
(Crash)Tj
/N38 1 Tf
0 8.743 -8.743 0 86.717 284.568 Tm
-0.007 Tc
0.017 Tw
[( may stop an update in )]TJ
-28.4 -1.16 TD
-0.025 Tc
(mid-)Tj
1.82 0 TD
-0.005 Tc
0.015 Tw
(flight and reset all or part of the volatile state. )Tj
/N22 1 Tf
-1.82 -2.16 TD
-0.001 Tc
0.011 Tw
(Scheduling: Condition variables )Tj
/N38 1 Tf
0 -1.92 TD
-0.006 Tc
0.016 Tw
(If a thread can\222t make progress until some condition is established, \and therefore has to release a )Tj
0 -1.16 TD
(lock so that some other thread can establish the condition, the simplest\ idiom is )Tj
/N51 1 Tf
0 7.344 -7.344 0 157.713 56.192 Tm
0 Tw
[(m.acq; )-48 (DO ~ condition involving x => m.rel; m.acq OD;)-48 ( touch x; m.rel )]TJ
ET
1 i
151.593 86.794 0.35 0.35 re
f 
151.593 86.794 0.35 0.35 re
f 
151.593 87.144 0.35 201.097 re
f 
151.593 288.24 0.35 0.35 re
f 
151.593 288.24 0.35 0.35 re
f 
151.943 86.794 7.869 0.35 re
f 
151.943 288.24 7.869 0.35 re
f 
159.812 86.794 0.35 0.35 re
f 
159.812 86.794 0.35 0.35 re
f 
159.812 87.144 0.35 201.097 re
f 
159.812 288.24 0.35 0.35 re
f 
159.812 288.24 0.35 0.35 re
f 
BT
/N38 1 Tf
0 8.743 -8.743 0 175.025 36.257 Tm
-0.007 Tc
0.017 Tw
(This is called \223busy waiting\224, because the thread keeps computing,\ waiting for the condition to )Tj
0 -1.18 TD
-0.003 Tc
0.013 Tw
(become true; it keeps releasing the lock so that some other thread can m\ake the condition true. )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
(This code is correct, but reacquiring the lock immediately makes it more\ difficult for another )Tj
T*
-0.004 Tc
0.014 Tw
(thread to get it, and going around the loop while the condition remains \false wastes processor )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
[(c)9 (y)9 (c)9 (les. Even if you have your own processor, this isn\222t a good scheme be\cause of the system-)]TJ
0 -1.16 TD
-0.006 Tc
0.016 Tw
(wide cost of repeatedly acquiring the lock. )Tj
0 -1.9 TD
-0.007 Tc
0.017 Tw
(The way around these problems is an optimization that replaces )Tj
/N51 1 Tf
0 7.344 -7.344 0 242.698 258.863 Tm
-0.005 Tc
0 Tw
(m.rel; m.acq)Tj
/N38 1 Tf
0 8.743 -8.743 0 242.698 311.323 Tm
-0.01 Tc
0.02 Tw
[( with )]TJ
/N51 1 Tf
0 7.344 -7.344 0 242.698 331.082 Tm
-0.005 Tc
(c.wait\(m\))Tj
/N38 1 Tf
0 8.743 -8.743 0 242.698 370.427 Tm
0.01 Tc
(, )Tj
-38.22 -1.18 TD
-0.005 Tc
(where )Tj
/N51 1 Tf
0 7.344 -7.344 0 253.015 59.689 Tm
0 Tc
0 Tw
(c)Tj
/N38 1 Tf
0 8.743 -8.743 0 253.015 64.061 Tm
-0.01 Tc
0.02 Tw
[( is a \221condition variable\222. The )]TJ
/N51 1 Tf
0 7.344 -7.344 0 253.015 167.932 Tm
-0.005 Tc
(c.wait\(m\))Tj
/N38 1 Tf
0 8.743 -8.743 0 253.015 207.277 Tm
-0.008 Tc
0.018 Tw
[( releases )]TJ
/N51 1 Tf
0 7.344 -7.344 0 253.015 238.928 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 253.015 243.299 Tm
-0.006 Tc
0.016 Tw
[( and then blocks the thread until )]TJ
-23.68 -1.16 TD
0 Tc
0.01 Tw
(some other thread does )Tj
/N51 1 Tf
0 7.344 -7.344 0 263.158 119.669 Tm
-0.005 Tc
(c.signal)Tj
/N38 1 Tf
0 8.743 -8.743 0 263.158 154.642 Tm
0.015 Tw
(. Then it reacquires )Tj
/N51 1 Tf
0 7.344 -7.344 0 263.158 223.889 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 263.158 228.261 Tm
-0.004 Tc
0.014 Tw
[( and returns. If several threads are )]TJ
-21.96 -1.18 TD
-0.009 Tc
(waiting, )Tj
/N51 1 Tf
0 7.344 -7.344 0 273.475 66.334 Tm
-0.005 Tc
(signal)Tj
/N38 1 Tf
0 8.743 -8.743 0 273.475 92.564 Tm
0.016 Tw
[( picks one or more to continue in a fair way. The variation )]TJ
/N51 1 Tf
0 7.344 -7.344 0 273.475 296.983 Tm
(c.broadcast)Tj
/N38 1 Tf
0 8.743 -8.743 0 273.475 345.072 Tm
0 Tc
0 Tw
( )Tj
-35.32 -1.16 TD
-0.007 Tc
0.017 Tw
(continues all the waiting threads.  )Tj
0 -1.9 TD
-0.005 Tc
0.015 Tw
(Here is the spec for condition variables. It says that the state is the \set of threads waiting on the )Tj
0 -1.18 TD
0.016 Tw
(condition, and it allows for lots of )Tj
/N51 1 Tf
0 7.344 -7.344 0 310.547 156.216 Tm
0 Tc
0 Tw
(C)Tj
/N38 1 Tf
0 8.743 -8.743 0 310.547 160.588 Tm
-0.008 Tc
0.018 Tw
(\222s because it\222s a class. The )Tj
/N51 1 Tf
0 7.344 -7.344 0 310.547 254.491 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 310.547 271.978 Tm
-0.014 Tc
0.024 Tw
[( method is especially )]TJ
-26.96 -1.18 TD
-0.005 Tc
0.015 Tw
[(interesting, since it\222s the first procedure we\222ve seen in a spec t\hat is not atomic \(except for the )]TJ
0 -1.16 TD
-0.009 Tc
0.019 Tw
[(clumsy non-)-16 (atomic specs for disk and file writes\). This is because the whole point\ is that during )]TJ
T*
-0.001 Tc
(the )Tj
/N51 1 Tf
0 7.344 -7.344 0 341.148 49.198 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 341.148 66.684 Tm
0.015 Tw
[( other threads have to run, access the variables protected by the mutex,\ and signal the )]TJ
-3.48 -1.18 TD
-0.004 Tc
0.014 Tw
(condition variable. Note that )Tj
/N51 1 Tf
0 7.344 -7.344 0 351.465 137.855 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 351.465 155.342 Tm
-0.003 Tc
0.013 Tw
[( takes an extra parameter, the mutex to release and reacquire. )]TJ
/N31 1 Tf
-13.62 -2.04 TD
0 Tc
0 Tw
(CLASS Condition )Tj
/N51 1 Tf
0 7.344 -7.344 0 369.302 120.193 Tm
-0.005 Tc
(EXPORT wait, signal, broadcast = )Tj
-11.4286 -2.0952 TD
(TYPE )Tj
2.6905 0 TD
(M = Mutex )Tj
-2.6905 -2 TD
[(VAR )-310 (c )-5953 (: )-595 (SET Thread := {} )]TJ
/N38 1 Tf
0 -1.1905 TD
0.001 Tc
0.011 Tw
(% Each condition variable is the set of waiting threads.)Tj
/N51 1 Tf
22.2143 0 TD
0 Tc
0 Tw
( )Tj
-22.2143 -1.9762 TD
-0.005 Tc
(PROC wait\(c, m\) = )Tj
2.6905 -1.2381 TD
(<< c + := {SELF}; m.rel >>; )Tj
/N38 1 Tf
29.4524 0 TD
0 Tc
(% )Tj
/N51 1 Tf
1.0952 0 TD
-0.005 Tc
(m.rel=HAVOC)Tj
/N38 1 Tf
6.5476 0 TD
0 Tc
0.012 Tw
[( unless )]TJ
/N51 1 Tf
3.0238 0 TD
-0.005 Tc
(SELF)Tj
/N38 1 Tf
2.381 0 TD
0 Tc
0 Tw
( )Tj
/N51 1 Tf
0.2619 0 TD
-0.005 Tc
(IN)Tj
/N38 1 Tf
1.1905 0 TD
0 Tc
( )Tj
/N51 1 Tf
0.2619 0 TD
-0.005 Tc
(m )Tj
-44.2143 -1.119 TD
(<< ~ \(SELF IN c\) => m.acq >> )Tj
-2.6905 -2 TD
(APROC signal\(c\) = <<  )Tj
/N38 1 Tf
0 -1.2381 TD
-0.002 Tc
0.014 Tw
(% Remove at least one thread from )Tj
/N51 1 Tf
14.381 0 TD
0 Tc
0 Tw
(c)Tj
/N38 1 Tf
0.5952 0 TD
0.012 Tw
[(.  In practice, usually just one.  )]TJ
/N51 1 Tf
12.619 0 TD
0 Tw
( )Tj
-24.9048 -1.119 TD
-0.005 Tc
[(IF )-881 (VAR t: SET Thread | t <= c /\\ t # {} => c - := t [*] SKIP FI >> )]TJ
-2.6905 -2 TD
(APROC broadcast\(c\) = << c := {} >> )Tj
0 -2.0238 TD
(END Condition )Tj
/N38 1 Tf
0 8.743 -8.743 0 518.463 36.257 Tm
-0.002 Tc
0.012 Tw
(For this scheme to work, a thread that changes )Tj
/N51 1 Tf
0 7.344 -7.344 0 518.463 200.982 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 518.463 205.353 Tm
-0.002 Tc
0.012 Tw
[( so that the condition becomes true must do a )]TJ
/N51 1 Tf
0 7.344 -7.344 0 528.78 36.257 Tm
-0.005 Tc
(signal)Tj
/N38 1 Tf
0 8.743 -8.743 0 528.78 62.487 Tm
0.012 Tc
-0.002 Tw
( or )Tj
/N51 1 Tf
0 7.344 -7.344 0 528.78 74.553 Tm
-0.005 Tc
(broadcast)Tj
/N38 1 Tf
0 8.743 -8.743 0 528.78 113.898 Tm
-0.003 Tc
0.013 Tw
(, in order to allow some waiting thread to continue. A foolproof but )Tj
-8.88 -1.16 TD
-0.011 Tc
0.021 Tw
(inefficient strategy is to have a single condition variable for )Tj
/N51 1 Tf
0 7.344 -7.344 0 538.922 242.95 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 538.922 247.321 Tm
0.005 Tc
0.005 Tw
( and to do )Tj
/N51 1 Tf
0 7.344 -7.344 0 538.922 284.918 Tm
-0.005 Tc
(broadcast)Tj
/N38 1 Tf
0 8.743 -8.743 0 538.922 324.263 Tm
-0.008 Tc
0.018 Tw
[( whenever )]TJ
/N51 1 Tf
0 7.344 -7.344 0 538.922 362.209 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 538.922 366.58 Tm
( )Tj
0 7.344 -7.344 0 38.279 413.969 Tm
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.619 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (8 )]TJ
0 8.743 -8.743 0 76.4 413.969 Tm
-0.008 Tc
0.018 Tw
(changes at all. More complicated schemes can be more efficient, but are \more likely to omit a )Tj
/N51 1 Tf
0 7.344 -7.344 0 86.717 413.969 Tm
-0.005 Tc
(signal)Tj
/N38 1 Tf
0 8.743 -8.743 0 86.717 440.199 Tm
-0.011 Tc
0.021 Tw
[( and leave a thread waiting indefinitely. The paper by Birrell in handou\t 15)]TJ
0 5.771 -5.771 0 84.444 697.778 Tm
0 Tc
0 Tw
(9)Tj
0 8.743 -8.743 0 86.717 700.751 Tm
-0.019 Tc
0.029 Tw
[( gives many )]TJ
-32.8 -1.16 TD
-0.007 Tc
0.017 Tw
(examples and some good advice. )Tj
0 -1.9 TD
0.002 Tc
0.008 Tw
(Note that you are )Tj
/N22 1 Tf
7.24 0 TD
0.001 Tc
(not)Tj
/N38 1 Tf
1.28 0 TD
-0.004 Tc
0.014 Tw
[( entitled to assume that the condition is true just because )]TJ
/N51 1 Tf
0 7.344 -7.344 0 113.472 686.936 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 113.472 704.423 Tm
0.002 Tc
0.008 Tw
[( returns. That )]TJ
-33.22 -1.18 TD
-0.006 Tc
0.016 Tw
(would be a little more efficient for the waiter, but it would be much mo\re error prone, and it )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
(would require a tighter spec for )Tj
/N51 1 Tf
0 7.344 -7.344 0 133.931 525.884 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 133.931 543.371 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 133.931 560.333 Tm
-0.005 Tc
(signal)Tj
/N38 1 Tf
0 8.743 -8.743 0 133.931 586.563 Tm
-0.009 Tc
0.019 Tw
[( that is often less efficient to implement. You )]TJ
-19.74 -1.18 TD
-0.002 Tc
0.012 Tw
[(are supposed to think of )]TJ
/N51 1 Tf
0 7.344 -7.344 0 144.248 500.353 Tm
-0.005 Tc
(c.wait\(m\))Tj
/N38 1 Tf
0 8.743 -8.743 0 144.248 539.698 Tm
-0.008 Tc
0.018 Tw
[( as just an optimization of )]TJ
/N51 1 Tf
0 7.344 -7.344 0 144.248 631.503 Tm
-0.005 Tc
0 Tw
(m.rel; m.acq)Tj
/N38 1 Tf
0 8.743 -8.743 0 144.248 683.963 Tm
-0.015 Tc
0.025 Tw
(. This idiom is very )Tj
-30.88 -1.16 TD
0.004 Tc
(robust. )Tj
0 -1.9 TD
-0.006 Tc
0.016 Tw
(Remember that after )Tj
/N51 1 Tf
0 7.344 -7.344 0 171.003 487.413 Tm
(c.wait\(m\))Tj
/N38 1 Tf
0 8.743 -8.743 0 171.003 526.758 Tm
-0.007 Tc
0.017 Tw
[( you cannot assume anything about )]TJ
/N51 1 Tf
0 7.344 -7.344 0 171.003 650.913 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 171.003 655.285 Tm
-0.011 Tc
0.021 Tw
[( beyond its invariant, since )]TJ
-27.6 -1.18 TD
-0.001 Tc
(the )Tj
/N51 1 Tf
0 7.344 -7.344 0 181.32 426.909 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 181.32 444.396 Tm
-0.007 Tc
0.017 Tw
[( unlocks )]TJ
/N51 1 Tf
0 7.344 -7.344 0 181.32 475.697 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 181.32 480.069 Tm
-0.007 Tc
0.017 Tw
[( and then locks it again. After a )]TJ
/N51 1 Tf
0 7.344 -7.344 0 181.32 591.109 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 181.32 608.596 Tm
0.016 Tw
(, only the invariant is guaranteed to hold, )Tj
-22.26 -1.18 TD
-0.003 Tc
0.013 Tw
(not anything else that was true about )Tj
/N51 1 Tf
0 7.344 -7.344 0 191.637 544.07 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 191.637 548.442 Tm
-0.003 Tc
0.013 Tw
[( before the wait.  )]TJ
/N22 1 Tf
-15.38 -2.16 TD
0.012 Tw
(Really easy concurrency )Tj
/N38 1 Tf
0 -1.9 TD
-0.007 Tc
0.017 Tw
(An even easier kind of concurrency uses buffers to connect independent m\odules, each with its )Tj
0 -1.18 TD
(own set of variables disjoint from those of any other module. Each modul\e consumes data from )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(some predecessor modules and produces data for some successor modules. I\n the simplest case )Tj
0 -1.18 TD
(the buffers are FIFO, but they might be unordered or use some other orde\ring rule. A little care is )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
(needed to program the buffers\222 )Tj
/N51 1 Tf
0 7.344 -7.344 0 268.054 523.96 Tm
-0.005 Tc
(Put)Tj
/N38 1 Tf
0 8.743 -8.743 0 268.054 537.075 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 268.054 554.037 Tm
-0.005 Tc
(Get)Tj
/N38 1 Tf
0 8.743 -8.743 0 268.054 567.152 Tm
-0.007 Tc
0.017 Tw
[( operations, but that\222s all. This is often called )]TJ
-17.52 -1.16 TD
-0.01 Tc
0.02 Tw
(\221pipelining\222. The fancier term \221data flow\222 is used if the mo\dules are connected not linearly but by )Tj
0 -1.18 TD
-0.006 Tc
0.016 Tw
(a more general DAG. )Tj
0 -1.9 TD
-0.008 Tc
0.018 Tw
(Another really easy kind of concurrency is provided by transaction proce\ssing or TP systems, in )Tj
0 -1.18 TD
-0.005 Tc
0.015 Tw
(which an application program accepts some input, reads and updates a sha\red database, and )Tj
0 -1.16 TD
0.016 Tw
(generates some output. The transaction mechanism makes this entire opera\tion atomic, using )Tj
0 -1.18 TD
(techniques that we will describe later. The application programmer doesn\\222t have to think about )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
(concurrency at all. In fact, the atomicity usually includes crash recove\ry, so she doesn\222t have to )Tj
T*
-0.005 Tc
0.015 Tw
[(think about fault-)-12 (tolerance either.  )]TJ
0 -1.92 TD
-0.002 Tc
0.012 Tw
(In the pure version of TP, there is no state preserved outside the trans\action except for the shared )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
(database. This means that the only invariants are invariants on the data\base; the programmer )Tj
0 -1.18 TD
-0.003 Tc
0.013 Tw
(doesn\222t have to worry about mistakenly keeping private state that rec\ords something about the )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
(shared state after locks are released. Furthermore, it means that a tran\saction can run on any )Tj
T*
-0.006 Tc
0.016 Tw
(machine that can access the database, so the TP system can take care of \launching programs and )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(doing load balancing as well as locking and fault tolerance. How easy ca\n it get? )Tj
0 -11.38 TD
0.01 Tc
0 Tw
(                                               )Tj
ET
521.261 413.969 0.35 104.92 re
f 
BT
0 8.743 -8.743 0 523.534 518.889 Tm
0 Tc
( )Tj
0 5.771 -5.771 0 529.48 413.969 Tm
(9)Tj
0 7.344 -7.344 0 531.753 416.942 Tm
0.003 Tc
0.009 Tw
[( Andrew Birrell, )]TJ
/N22 1 Tf
6.9048 0 TD
-0.001 Tc
0.013 Tw
(An Introduction to Programming with Threads)Tj
/N38 1 Tf
18.7619 0 TD
0 Tc
0.012 Tw
(, research report 35, Systems Research Center, )Tj
-26.0714 -1.0952 TD
0.003 Tc
0.009 Tw
(Digital Equipment Corporation, January 1989. )Tj
ET
PDFVars/TermAll get exec end end
restore
gsave showpage grestore
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 5 5
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20667 (9 )]TJ
/N39 1 Tf
0 10.142 -10.142 0 76.4 36.257 Tm
-0.004 Tc
0.013 Tw
(Hard concurrency )Tj
/N38 1 Tf
0 8.743 -8.743 0 95.286 36.257 Tm
0.014 Tw
(If you don\222t program according to the rules for locks, then you are d\oing hard concurrency, and )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
(it will be hard. Why bother? There are three reasons: )Tj
1.5 -1.9 TD
-0.008 Tc
0.018 Tw
[(You may have to implement mutexes and condition variables on top of some\thing weaker, )]TJ
0 -1.18 TD
-0.007 Tc
0.017 Tw
(such as the atomic reads and writes of memory that a basic processor or \file system gives )Tj
0 -1.16 TD
-0.011 Tc
0.021 Tw
[(you. Of course, only the low-)-18 (level runtime implementer will be in this position. )]TJ
0 -1.92 TD
-0.005 Tc
0.015 Tw
(It may be cheaper to do the work you need to do using weaker primitives \than mutexes. If )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(efficiency is important, hard concurrency may be worth the trouble. But \you will pay for it )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(either in bugs or in careful proofs of correctness. )Tj
0 -1.9 TD
-0.007 Tc
0.017 Tw
(It may be important to avoid waiting for a lock to be released. Even if \a critical section is )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(coded carefully so that it doesn\222t do too much computing, there are s\till ways for the lock to )Tj
0 -1.16 TD
-0.01 Tc
0.02 Tw
(be held for a long time. If the thread holding the lock can fail indepen\dently \(for example, if )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
(it is in a different address space or on a different machine\), then the\ lock can be held )Tj
0 -1.16 TD
(indefinitely. If the thread can get a page fault while holding the lock,\ then the lock can be )Tj
T*
-0.005 Tc
0.015 Tw
(held for a disk access time. A concurrent algorithm that prevents one sl\ow \(or failed\) thread )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(from delaying other thread too much is called \221wait free\222.)Tj
0 5.771 -5.771 0 255.638 247.496 Tm
0.015 Tc
(10)Tj
0 8.743 -8.743 0 257.912 253.442 Tm
0 Tc
0 Tw
( )Tj
-24.84 -1.9 TD
-0.005 Tc
0.015 Tw
(In fact, the \223put out your hand\224 way of looking at things applies \to hard concurrency as well. The )Tj
0 -1.18 TD
-0.009 Tc
0.019 Tw
(difference is that instead of preventing )Tj
/N51 1 Tf
0 7.344 -7.344 0 284.841 171.08 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 284.841 175.451 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 284.841 192.413 Tm
0 Tc
0 Tw
(y)Tj
/N38 1 Tf
0 8.743 -8.743 0 284.841 196.785 Tm
-0.007 Tc
0.017 Tw
[( from changing at all, you do something to ensure )]TJ
-18.36 -1.16 TD
0.005 Tc
0.005 Tw
[(that som)11 (e)11 ( )]TJ
4.1498 0 TD
-0.006 Tc
(predicate )Tj
/N51 1 Tf
0 7.344 -7.344 0 294.983 106.379 Tm
0 Tw
(p\(x, y\))Tj
/N38 1 Tf
0 8.743 -8.743 0 294.983 136.981 Tm
0.015 Tw
[( will remain true. The convention that the rest of the program obeys )]TJ
-11.52 -1.18 TD
-0.008 Tc
0.018 Tw
(may be quite subtle. A simple example is the careful write solution to k\eeping track of free space )Tj
0 -1.16 TD
[(in a file system \(handout 7 on formal concurrency, page 16\), in which \the predicate is  )]TJ
/N51 1 Tf
0 7.344 -7.344 0 324.885 56.192 Tm
-0.005 Tc
0 Tw
(free\(da\) ==> ~ Reachable\(da\).  )Tj
/N38 1 Tf
0 8.743 -8.743 0 335.378 36.257 Tm
-0.008 Tc
0.018 Tw
(The special case of locking maintains the strong predicate )Tj
/N51 1 Tf
0 7.344 -7.344 0 335.378 238.403 Tm
-0.005 Tc
0 Tw
(x = x0 /\\ y = y0)Tj
/N38 1 Tf
0 8.743 -8.743 0 335.378 308.35 Tm
-0.009 Tc
0.019 Tw
[( \(unless you )]TJ
-31.12 -1.16 TD
(change )Tj
/N51 1 Tf
0 7.344 -7.344 0 345.52 62.837 Tm
0 Tc
0 Tw
(x)Tj
/N38 1 Tf
0 8.743 -8.743 0 345.52 67.209 Tm
0.012 Tc
-0.002 Tw
( or )Tj
/N51 1 Tf
0 7.344 -7.344 0 345.52 79.275 Tm
0 Tc
0 Tw
(y)Tj
/N38 1 Tf
0 8.743 -8.743 0 345.52 83.646 Tm
-0.008 Tc
0.018 Tw
[( yourself\). )]TJ
-5.42 -1.92 TD
-0.003 Tc
0.013 Tw
(We postpone a detailed study of hard concurrency to handout 17.  )Tj
/N39 1 Tf
0 10.142 -10.142 0 383.291 36.257 Tm
0.012 Tw
(Problems in easy concurrency: Deadlock  )Tj
/N38 1 Tf
0 8.743 -8.743 0 402.351 36.257 Tm
-0.009 Tc
0.019 Tw
(The biggest problem for easy concurrency is deadlock, in which there is \a cycle of the form )Tj
1.5 -1.92 TD
0.001 Tc
(Lock )Tj
/N22 1 Tf
2.32 0 TD
0 Tc
0 Tw
(a)Tj
/N38 1 Tf
0.5 0 TD
-0.01 Tc
0.02 Tw
[( is held by thread 1. )]TJ
-2.82 -1.16 TD
-0.007 Tc
0.017 Tw
(Thread 1 is waiting for lock )Tj
/N22 1 Tf
11.28 0 TD
0 Tc
0 Tw
(b)Tj
/N38 1 Tf
0.5 0 TD
0.01 Tc
(. )Tj
-11.78 -1.18 TD
0.001 Tc
(Lock )Tj
/N22 1 Tf
2.32 0 TD
0 Tc
(b)Tj
/N38 1 Tf
0.5 0 TD
-0.01 Tc
0.02 Tw
[( is held by thread 2. )]TJ
-2.82 -1.16 TD
0.01 Tc
(... )Tj
T*
0.001 Tc
(Lock )Tj
/N22 1 Tf
2.32 0 TD
0 Tc
0 Tw
(h)Tj
/N38 1 Tf
0.5 0 TD
-0.01 Tc
0.02 Tw
[( is held by thread 8. )]TJ
-2.82 -1.18 TD
-0.007 Tc
0.017 Tw
(Thread 8 is waiting for lock )Tj
/N22 1 Tf
11.28 0 TD
0 Tc
0 Tw
(a)Tj
/N38 1 Tf
0.5 0 TD
0.01 Tc
(. )Tj
-13.28 -4.26 TD
(                                               )Tj
ET
1 i
505.173 36.257 0.35 104.92 re
f 
BT
0 8.743 -8.743 0 507.446 141.177 Tm
0 Tc
( )Tj
0 5.771 -5.771 0 513.567 36.257 Tm
0.015 Tc
(10)Tj
0 7.344 -7.344 0 515.84 42.203 Tm
0 Tc
0.012 Tw
[( M. Herlihy. Wait-free synchronization.  )]TJ
/N22 1 Tf
16.5 0 TD
-0.001 Tc
0.013 Tw
(ACM Transactions on Programming Languages and Systems)Tj
/N38 1 Tf
24.5238 0 TD
0 Tc
0 Tw
( )Tj
/N39 1 Tf
0.2619 0 TD
(13)Tj
/N38 1 Tf
1 0 TD
0.007 Tc
0.005 Tw
(, 1 \(Jan. )Tj
-43.0952 -1.0952 TD
0.001 Tc
0.011 Tw
(1991\), pp 124-149. There is a general method for implementing wait-free\ concurrency, given a primitive at least as )Tj
0 -1.0714 TD
0.003 Tc
0.009 Tw
[(strong as compare-)3 (and-)3 (s)23 (w)]TJ
10.5238 0 TD
0 Tc
-0.005 Tw
(ap; it is described in M. Herlihy. A methodology for implementing highly\ concurrent data )Tj
-10.5238 -1.0952 TD
-0.01 Tc
(objects. )Tj
/N22 1 Tf
3.2619 0 TD
-0.001 Tc
0.013 Tw
(ACM Transactions on Programming Languages and Systems)Tj
/N38 1 Tf
24.5238 0 TD
0 Tc
0 Tw
( )Tj
/N39 1 Tf
0.2619 0 TD
0.004 Tc
(15, )Tj
/N38 1 Tf
1.5238 0 TD
-0.001 Tc
0.013 Tw
(9 \(Nov. 1993\), pp 745-770. )Tj
21.8571 68.2857 TD
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20167 (10 )]TJ
0 8.743 -8.743 0 76.4 413.969 Tm
-0.007 Tc
(All the locks and threads are nodes in a lock graph with the edges \223l\ock )Tj
/N22 1 Tf
28.68 0 TD
0 Tc
0 Tw
(a)Tj
/N38 1 Tf
0.5 0 TD
-0.01 Tc
0.02 Tw
[( is held by thread 1\224, )]TJ
-29.18 -1.18 TD
-0.007 Tc
0.017 Tw
(\223thread 1 is waiting for lock )Tj
/N22 1 Tf
11.38 0 TD
0 Tc
0 Tw
(b)Tj
/N38 1 Tf
0.5 0 TD
0.005 Tc
0.005 Tw
(\224, etc. )Tj
/N24 1 Tf
0 5.771 -5.771 0 100.882 508.397 Tm
0 Tc
0 Tw
( )Tj
ET
1 1 1 rg
115.92 618.388 10.492 26.23 re
f 
BT
/N38 1 Tf
0 7.17 -7.17 0 122.565 621.536 Tm
0 0 0 rg
(waiting)Tj
/N24 1 Tf
0 5.771 -5.771 0 122.04 643.219 Tm
( )Tj
-0.0303 0 TD
( )Tj
ET
0 0 0 RG
1 J
1 j
0.525 w
10 M
[]0 d
181.32 518.714 m
155.265 518.714 l
S 
155.615 521.512 m
149.844 518.714 l
155.615 515.916 l
155.615 521.512 l
f* 
145.123 639.372 m
171.003 639.372 l
S 
170.828 636.574 m
176.599 639.372 l
170.828 642.17 l
170.828 636.574 l
f* 
184.118 634.126 m
197.408 607.547 l
S 
194.785 606.497 m
200.031 602.65 l
200.031 609.12 l
194.785 606.497 l
f* 
110.674 602.65 m
133.407 629.929 l
S 
135.505 627.831 m
137.079 634.126 l
131.133 631.503 l
135.505 627.831 l
f* 
1 1 1 rg
100.182 550.19 10.667 10.492 re
B 
BT
/N22 1 Tf
0 8.743 -8.743 0 108.401 554.037 Tm
0 0 0 rg
(a)Tj
/N28 1 Tf
0 5.771 -5.771 0 107.876 558.584 Tm
( )Tj
-0.0303 0 TD
( )Tj
ET
1 1 1 rg
105.778 607.721 m
101.434 607.721 97.909 604.235 97.909 599.94 c
97.909 595.644 101.434 592.158 105.778 592.158 c
110.121 592.158 113.647 595.644 113.647 599.94 c
113.647 604.235 110.121 607.721 105.778 607.721 c
b 
BT
/N38 1 Tf
0 8.743 -8.743 0 108.401 598.628 Tm
0 0 0 rg
(1)Tj
/N24 1 Tf
0 5.771 -5.771 0 107.876 603.175 Tm
( )Tj
-0.0303 0 TD
( )Tj
ET
1 1 1 rg
136.904 634.126 10.667 10.492 re
B 
BT
/N22 1 Tf
0 8.743 -8.743 0 145.123 637.973 Tm
0 0 0 rg
(b)Tj
/N28 1 Tf
0 5.771 -5.771 0 144.598 642.52 Tm
( )Tj
-0.0303 0 TD
( )Tj
ET
1 1 1 rg
184.468 647.066 m
180.124 647.066 176.599 643.58 176.599 639.285 c
176.599 634.989 180.124 631.503 184.468 631.503 c
188.811 631.503 192.337 634.989 192.337 639.285 c
192.337 643.58 188.811 647.066 184.468 647.066 c
b 
BT
/N38 1 Tf
0 8.743 -8.743 0 187.091 637.973 Tm
0 0 0 rg
(2)Tj
ET
q
179.222 633.951 10.492 10.842 re
W n 
BT
/N24 1 Tf
0 5.771 -5.771 0 186.566 642.52 Tm
( )Tj
-0.0303 0 TD
( )Tj
ET
Q
1 1 1 rg
178.872 513.468 10.667 10.492 re
B 
BT
/N22 1 Tf
0 8.743 -8.743 0 187.091 517.315 Tm
0 0 0 rg
(h)Tj
ET
q
179.222 513.643 9.967 10.142 re
W n 
BT
/N28 1 Tf
0 5.771 -5.771 0 186.566 521.862 Tm
( )Tj
-0.0303 0 TD
( )Tj
ET
Q
1 1 1 rg
142.5 526.234 m
138.156 526.234 134.631 522.708 134.631 518.365 c
134.631 514.021 138.156 510.496 142.5 510.496 c
146.843 510.496 150.369 514.021 150.369 518.365 c
150.369 522.708 146.843 526.234 142.5 526.234 c
b 
BT
/N38 1 Tf
0 8.743 -8.743 0 145.123 516.966 Tm
0 0 0 rg
(8)Tj
/N24 1 Tf
0 5.771 -5.771 0 144.598 521.512 Tm
( )Tj
-0.0303 0 TD
( )Tj
ET
105.428 560.682 m
105.428 586.563 l
S 
108.401 586.388 m
105.603 592.158 l
102.63 586.388 l
108.401 586.388 l
f* 
BT
/N38 1 Tf
0 7.17 -7.17 0 101.581 569.251 Tm
0.006 Tc
(holds)Tj
/N24 1 Tf
0 5.771 -5.771 0 101.056 585.164 Tm
0 Tc
( )Tj
-0.0303 0 TD
( )Tj
/N38 1 Tf
0 7.17 -7.17 0 164.533 642.695 Tm
0.006 Tc
(holds)Tj
ET
q
157.888 639.372 10.492 20.984 re
W n 
BT
/N24 1 Tf
0 5.771 -5.771 0 164.008 658.608 Tm
0 Tc
( )Tj
-0.0303 0 TD
( )Tj
ET
Q
199.856 555.436 m
186.741 528.857 l
S 
184.293 530.43 m
184.293 523.96 l
189.364 527.807 l
184.293 530.43 l
f* 
199.157 595.656 1.574 1.749 re
f 
199.157 592.333 1.574 1.749 re
f 
199.157 589.011 1.574 1.749 re
f 
199.157 585.688 1.574 1.749 re
f 
199.157 582.366 1.574 1.749 re
f 
199.157 579.043 1.574 1.749 re
f 
199.157 575.721 1.574 1.749 re
f 
199.157 572.398 1.574 1.749 re
f 
199.157 569.076 1.574 1.749 re
f 
199.157 565.753 1.574 1.749 re
f 
199.157 562.431 1.574 1.749 re
f 
199.157 560.682 1.574 0.175 re
f 
136.904 523.96 m
114.521 546.343 l
S 
116.794 548.092 m
110.849 550.19 l
112.772 544.07 l
116.794 548.092 l
f* 
BT
0 7.17 -7.17 0 164.533 522.037 Tm
(holds)Tj
/N24 1 Tf
0 5.771 -5.771 0 164.008 537.95 Tm
0 Tc
( )Tj
-0.0303 0 TD
( )Tj
ET
1 1 1 rg
115.92 508.397 10.492 26.055 re
f 
BT
/N38 1 Tf
0 7.17 -7.17 0 122.565 511.37 Tm
0 0 0 rg
(waiting)Tj
/N24 1 Tf
0 5.771 -5.771 0 122.04 533.053 Tm
( )Tj
-0.0303 0 TD
( )Tj
/N38 1 Tf
0 8.743 -8.743 0 201.605 660.356 Tm
( )Tj
-28.18 -1.7 TD
-0.007 Tc
0.017 Tw
(The way to deal with this that is simplest for the application programme\r is to )Tj
/N22 1 Tf
31.06 0 TD
-0.001 Tc
(detect)Tj
/N38 1 Tf
2.38 0 TD
-0.008 Tc
0.018 Tw
[( a deadlo)-13 (c)-13 (k)]TJ
0 5.771 -5.771 0 214.195 746.041 Tm
0.015 Tc
(11)Tj
0 8.743 -8.743 0 216.468 751.986 Tm
0 Tc
0 Tw
( )Tj
-38.66 -1.18 TD
-0.009 Tc
0.019 Tw
(and automatically roll back one of the threads, undoing any changes it h\as made and releasing its )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
[(locks. Then the rolled-)-12 (back thread retries; in the meantime, the others can proceed. )]TJ
T*
-0.008 Tc
0.018 Tw
(Unfortunately, this approach is only practical when automatic rollback i\s possible, that is, when )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
(all the changes are done as part of a transaction. We will be talking ab\out this in a few weeks. )Tj
0 -1.9 TD
-0.009 Tc
0.019 Tw
(The main alternative is to )Tj
/N22 1 Tf
10.32 0 TD
0 Tc
(avoid)Tj
/N38 1 Tf
2.22 0 TD
-0.008 Tc
0.018 Tw
[( deadlocks by defining a partial order on the locks, and abiding )]TJ
-12.54 -1.18 TD
-0.009 Tc
0.019 Tw
(by a rule that you only acquire a lock if it is greater than every lock \you already hold. This )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(ensures that there can\222t be any cycles in the graph of threads and lo\cks. Note that there is no )Tj
0 -1.18 TD
(requirement to release the locks in order, since a release never has to \wait. )Tj
0 -1.9 TD
-0.011 Tc
0.021 Tw
(To implement this idea you  )Tj
1.5 -1.92 TD
-0.005 Tc
0.015 Tw
(annotate each shared variable with its protecting lock \(which you are s\upposed to do anyway )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
(when practicing easy concurrency\),  )Tj
0 -1.9 TD
-0.001 Tc
0.011 Tw
(state the partial order on the locks, and  )Tj
0 -1.92 TD
-0.005 Tc
0.015 Tw
(annotate each procedure or code block with its \221locking level\222 )Tj
/N51 1 Tf
0 7.344 -7.344 0 381.892 644.094 Tm
(ll)Tj
/N38 1 Tf
0 8.743 -8.743 0 381.892 652.837 Tm
-0.009 Tc
0.019 Tw
(, the maximum lock that can )Tj
-25.82 -1.18 TD
-0.01 Tc
0.02 Tw
(be held when it is entered, like this: )Tj
/N51 1 Tf
0 7.344 -7.344 0 392.209 551.589 Tm
-0.005 Tc
0 Tw
(ll <= x)Tj
/N38 1 Tf
0 8.743 -8.743 0 392.209 582.191 Tm
0.01 Tc
(.  )Tj
-19.24 -1.9 TD
-0.006 Tc
0.016 Tw
(Then you always know textually the biggest lock that can be held \(by st\arting at the procedure )Tj
0 -1.18 TD
0.015 Tw
(entry with the annotation, and adding locks that are acquired\), and can\ check whether an )Tj
/N51 1 Tf
0 7.344 -7.344 0 419.139 723.833 Tm
(acq)Tj
/N38 1 Tf
0 8.743 -8.743 0 419.139 736.948 Tm
-0.024 Tc
0.034 Tw
[( is )]TJ
-36.94 -1.16 TD
-0.004 Tc
0.014 Tw
(for a bigger lock as required, or not. With a stronger annotation that t\ells exactly what locks are )Tj
T*
-0.005 Tc
0.015 Tw
(held, you can subtract those that are released as well. You also have to\ check when you call a )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(procedure that the current locking level is consistent with the procedur\e\222s annotation. This check )Tj
0 -1.16 TD
-0.012 Tc
0.022 Tw
(is very similar to type checking. )Tj
0 -1.9 TD
-0.006 Tc
0.016 Tw
(Having described the basic method, we look at some examples of how it wo\rks and where it runs )Tj
0 -1.18 TD
-0.013 Tc
0.023 Tw
(into difficulties. )Tj
0 -4.2 TD
0.01 Tc
0 Tw
(                                               )Tj
ET
521.261 413.969 0.35 104.92 re
f 
BT
0 8.743 -8.743 0 523.534 518.889 Tm
0 Tc
( )Tj
0 5.771 -5.771 0 529.48 413.969 Tm
0.015 Tc
(11)Tj
0 7.344 -7.344 0 531.753 419.915 Tm
-0.002 Tc
0.014 Tw
[( For ways of detecting deadlocks, see Gray and Reuter, pp 481-483 and A.\ Thomasian, Two phase locking )]TJ
-0.8095 -1.0952 TD
0.004 Tc
0.008 Tw
(performance and its thrashing behavior. )Tj
/N22 1 Tf
16.3571 0 TD
0 Tc
0.012 Tw
(ACM Transactions on Database Systems)Tj
/N38 1 Tf
16.381 0 TD
0 Tw
( )Tj
/N39 1 Tf
0.2619 0 TD
(18)Tj
/N38 1 Tf
1 0 TD
0.001 Tc
0.011 Tw
[(, 4 \(Dec. 1993\),  pp. 579-625 )]TJ
ET
PDFVars/TermAll get exec end end
restore
gsave showpage grestore
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 6 6
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20167 (11 )]TJ
0 8.743 -8.743 0 76.4 36.257 Tm
-0.002 Tc
0.012 Tw
(If resources are arranged in a tree and the program always traverses the\ tree down from root to )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(leaves, or up from leaves to root, \(in the usual convention, which draw\s trees upside down\) then )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
(the tree defines a suitable lock ordering. Examples are a strictly hiera\rchical file system or a tree )Tj
T*
-0.005 Tc
0.015 Tw
(of windows. If the program sometimes goes up and sometimes goes down, th\ere are problems; )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(we discuss some solutions shortly. If instead of a tree we have a DAG, i\t still defines a suitable )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
(lock ordering.  )Tj
0 -1.9 TD
-0.009 Tc
0.019 Tw
[(Often, as in the file system example, this graph is actually a data stru\cture whose links determine )]TJ
0 -1.18 TD
-0.006 Tc
0.016 Tw
(the accessibility of the nodes. In this situation you can choose when to\ release locks. If the graph )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
(is static, it\222s all right to release locks at any time. If you releas\e each lock before acquiring the )Tj
0 -1.18 TD
-0.003 Tc
0.013 Tw
(next one, there is no danger of deadlock regardless of the structure of \the graph, because a flat )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
(ordering \(everything unordered\) is good enough as long as you hold at \most one lock at a time. If )Tj
T*
-0.006 Tc
0.016 Tw
(the graph is dynamic and a node can disappear when it isn\222t locked, y\ou have to hold on to one )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(lock at least until after you have acquired the next one. This is called\ \221lock coupling\222, and a )Tj
0 -1.16 TD
-0.012 Tc
0.022 Tw
(cyclic graph can cause deadlock. We will see an example of this when we \study hierarchical file )Tj
T*
-0.007 Tc
0.017 Tw
(systems in handout 15. )Tj
0 -1.92 TD
-0.006 Tc
0.016 Tw
(Here is another common locking pattern. Consider a program that manipula\tes objects named by )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(handles and maintains a set of these objects. For example, the objects m\ight be buffers, and the )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
[(set the buffers that are non-)-12 (empty. One thread works on an object and sometimes needs to mess )]TJ
T*
0.016 Tw
[(with the set, for instance when a buffer changes from empty to non-)-13 (empty. Another thread )]TJ
0 -1.18 TD
-0.003 Tc
0.013 Tw
(processes the set and needs to mess with some of the objects, for instan\ce to empty out the )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(buffers at regular intervals. It\222s natural to have a lock )Tj
/N51 1 Tf
0 7.344 -7.344 0 293.584 223.015 Tm
(h.m)Tj
/N38 1 Tf
0 8.743 -8.743 0 293.584 236.13 Tm
[( on each object and a lock )]TJ
/N51 1 Tf
0 7.344 -7.344 0 293.584 328.809 Tm
(ms)Tj
/N38 1 Tf
0 8.743 -8.743 0 293.584 337.553 Tm
0.002 Tc
0.008 Tw
[( on the set. )]TJ
-34.46 -1.16 TD
-0.006 Tc
0.016 Tw
(How should they be ordered? We work out a solution in which the ordering\ of locks is every )Tj
/N51 1 Tf
0 7.344 -7.344 0 314.044 36.257 Tm
0 Tw
(h.m < ms)Tj
/N38 1 Tf
0 8.743 -8.743 0 314.044 71.231 Tm
0.01 Tc
(. )Tj
/N51 1 Tf
0 7.344 -7.344 0 329.257 36.257 Tm
-0.005 Tc
(TYPE )Tj
2.6905 0 TD
[(H )-5953 (= )-595 (Int WITH {acq:=\(\\h|ot\(h\).m.acq\),  )]TJ
/N38 1 Tf
29.4524 0 TD
0.003 Tc
0.009 Tw
(% Handle \(index in )Tj
/N51 1 Tf
8.1429 0 TD
-0.005 Tc
(ot)Tj
/N38 1 Tf
1.1905 0 TD
0 Tc
0 Tw
(\))Tj
/N51 1 Tf
0.3333 0 TD
( )Tj
-41.8095 -1.1429 TD
-0.005 Tc
[( )-2095 ( )-6548 (             rel:=\(\\h|ot\(h\).m.rel\), )]TJ
0 -1.119 TD
[( )-2095 ( )-6548 (             y  :=\(\\h|ot\(h\).y \), empty:=...})]TJ
/N38 1 Tf
36.0238 0 TD
0 Tc
( )Tj
/N51 1 Tf
0.2619 0 TD
( )Tj
-33.5952 -1.119 TD
( )Tj
-2.6905 -2.119 TD
-0.005 Tc
0.31 Tw
[(VAR s )-5643 (: )-285 (SET )310 (H )]TJ
/N38 1 Tf
32.1429 0 TD
-0.008 Tc
0.02 Tw
(% Set protected by)Tj
/N51 1 Tf
7.5 0 TD
-0.005 Tc
0 Tw
( ms  )Tj
-36.9524 -1.119 TD
5.357 Tw
[(ms : )4762 (Mutex )]TJ
0 -1.2381 TD
0 Tw
[(ot )-5357 (: )-595 (H -> [m: Mutex, y: Any] )]TJ
/N38 1 Tf
29.4524 0 TD
0.018 Tw
(% Object Table.)Tj
/N51 1 Tf
6.4762 0 TD
0 Tw
( m )Tj
/N38 1 Tf
1.7857 0 TD
-0.003 Tc
(protects)Tj
/N51 1 Tf
3.1429 0 TD
-0.005 Tc
( y, )Tj
-40.8571 -1.1667 TD
6.543 Tc
[(  )5357 ( )]TJ
/N38 1 Tf
29.4524 0 TD
-0.002 Tc
0.014 Tw
(% which is the object\222s data)Tj
/N51 1 Tf
11.2619 0 TD
0 Tc
0 Tw
( )Tj
/N38 1 Tf
0 8.743 -8.743 0 412.144 36.257 Tm
-0.001 Tc
0.011 Tw
(Note that each piece of state that is not a mutex is annotated with the \lock that protects it: )Tj
/N51 1 Tf
0 7.344 -7.344 0 412.144 351.542 Tm
0 Tc
0 Tw
(s)Tj
/N38 1 Tf
0 8.743 -8.743 0 412.144 355.914 Tm
-0.01 Tc
0.02 Tw
[( with )]TJ
/N51 1 Tf
0 7.344 -7.344 0 422.461 36.257 Tm
-0.005 Tc
(ms)Tj
/N38 1 Tf
0 8.743 -8.743 0 422.461 45.001 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 422.461 61.963 Tm
0 Tc
0 Tw
(y)Tj
/N38 1 Tf
0 8.743 -8.743 0 422.461 66.334 Tm
-0.01 Tc
0.02 Tw
[( with )]TJ
/N51 1 Tf
0 7.344 -7.344 0 422.461 86.094 Tm
0 Tc
0 Tw
(m)Tj
/N38 1 Tf
0 8.743 -8.743 0 422.461 90.466 Tm
-0.006 Tc
0.016 Tw
(. The \221object table\222 )Tj
/N51 1 Tf
0 7.344 -7.344 0 422.461 158.664 Tm
(ot)Tj
/N38 1 Tf
0 8.743 -8.743 0 422.461 167.407 Tm
[( is fixed and therefore doesn\222t need a lock.  )]TJ
-15 -1.9 TD
-0.009 Tc
0.019 Tw
[(We would like to maintain the invariant \223object is non-)-16 (empty\224 = \223object in set\224: )]TJ
/N51 1 Tf
0 7.344 -7.344 0 439.073 314.82 Tm
-0.005 Tc
0 Tw
(~ h.empty = )Tj
-37.9286 -1.4048 TD
(h IN s)Tj
/N38 1 Tf
0 8.743 -8.743 0 449.391 62.487 Tm
-0.008 Tc
0.018 Tw
(. This requires holding both )Tj
/N51 1 Tf
0 7.344 -7.344 0 449.391 160.413 Tm
-0.005 Tc
(h.m)Tj
/N38 1 Tf
0 8.743 -8.743 0 449.391 173.528 Tm
-0.008 Tc
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 449.391 190.49 Tm
-0.005 Tc
(ms)Tj
/N38 1 Tf
0 8.743 -8.743 0 449.391 199.233 Tm
-0.008 Tc
[( when the emptiness of an object changes. )]TJ
-18.64 -1.16 TD
-0.015 Tc
0.025 Tw
(Actually we maintain )Tj
/N51 1 Tf
0 7.344 -7.344 0 459.533 111.625 Tm
-0.005 Tc
0 Tw
(h.m is locked \\/ \(~ h.empty = h IN s\))Tj
/N38 1 Tf
0 8.743 -8.743 0 459.533 273.376 Tm
0.016 Tw
(, which is just as good. The )Tj
/N51 1 Tf
0 7.344 -7.344 0 469.85 36.257 Tm
(Fill)Tj
/N38 1 Tf
0 8.743 -8.743 0 469.85 53.744 Tm
-0.002 Tc
0.012 Tw
[( procedure that works on objects is very straightforward; )]TJ
/N51 1 Tf
0 7.344 -7.344 0 469.85 253.791 Tm
-0.005 Tc
(Add)Tj
/N38 1 Tf
0 8.743 -8.743 0 469.85 266.906 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 469.85 283.868 Tm
-0.005 Tc
(Drain)Tj
/N38 1 Tf
0 8.743 -8.743 0 469.85 305.727 Tm
-0.004 Tc
0.014 Tw
[( are functions that )]TJ
-30.82 -1.16 TD
-0.008 Tc
0.018 Tw
[(compute the new state of the object in some unspecified way, leaving it \non-)-15 (empty and empty )]TJ
T*
-0.003 Tc
0.013 Tw
(respectively. Note that )Tj
/N51 1 Tf
0 7.344 -7.344 0 490.134 117.046 Tm
-0.005 Tc
(Fill)Tj
/N38 1 Tf
0 8.743 -8.743 0 490.134 134.532 Tm
-0.011 Tc
0.021 Tw
[( only acquires )]TJ
/N51 1 Tf
0 7.344 -7.344 0 490.134 184.894 Tm
-0.005 Tc
(ms)Tj
/N38 1 Tf
0 8.743 -8.743 0 490.134 193.637 Tm
0.016 Tw
[( when it becomes non-)-13 (empty, and we expect this to )]TJ
-18 -1.18 TD
-0.011 Tc
0.021 Tw
(happen on only a small fraction of the calls. )Tj
0 7.344 -7.344 0 38.279 413.969 Tm
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20167 (12 )]TJ
/N51 1 Tf
0 68.5476 TD
0 Tw
(PROC Fill\(h, x: Any\) =  )Tj
/N38 1 Tf
0 -1.2143 TD
0.018 Tw
(% Update the object )Tj
/N51 1 Tf
8.3333 0 TD
0 Tc
0 Tw
(h)Tj
/N38 1 Tf
0.5952 0 TD
0.005 Tc
0.007 Tw
[( using the data )]TJ
/N51 1 Tf
6.1667 0 TD
-0.005 Tc
(x )Tj
-12.4048 -1.1429 TD
0 Tw
(h.acq;  )Tj
0 -1.1191 TD
(IF h.empty => ms.acq; s + := {h}; ms.rel [*] SKIP FI;  )Tj
T*
(ot\(h\).y := Add\(h.y, x\);  )Tj
T*
(h.rel )Tj
/N38 1 Tf
0 8.743 -8.743 0 134.281 413.969 Tm
(The )Tj
/N51 1 Tf
0 7.344 -7.344 0 134.281 429.707 Tm
(Demon)Tj
/N38 1 Tf
0 8.743 -8.743 0 134.281 451.565 Tm
-0.003 Tc
0.013 Tw
[( thread that works on the set is less straightforward, since the lock or\dering keeps it )]TJ
-4.3 -1.18 TD
-0.006 Tc
0.016 Tw
(from acquiring the locks in the order that is natural for it. )Tj
/N51 1 Tf
0 7.344 -7.344 0 159.287 413.969 Tm
0 Tw
(THREAD Demon\(\) = DO  )Tj
2.6905 -1.119 TD
(ms.acq;  )Tj
T*
[(IF )-881 (VAR h | h IN s  =>  )]TJ
5.3571 -1.1429 TD
(ms.rel;  )Tj
0 -1.2143 TD
(h.acq; ms.acq;    )Tj
/N38 1 Tf
24.0952 0 TD
0.001 Tc
0.011 Tw
(% acquire locks in order)Tj
/N51 1 Tf
9.8333 0 TD
0 Tc
0 Tw
( )Tj
-33.9286 -1.2143 TD
-0.005 Tc
[(IF )-881 (h IN s =>  )]TJ
/N38 1 Tf
24.0952 0 TD
0 Tc
0.012 Tw
(% is )Tj
/N51 1 Tf
2.0238 0 TD
0 Tw
(h)Tj
/N38 1 Tf
0.5952 0 TD
0.008 Tc
0.004 Tw
( still in )Tj
/N51 1 Tf
3.1191 0 TD
0 Tc
0 Tw
(s)Tj
/N38 1 Tf
0.5952 0 TD
(?)Tj
/N51 1 Tf
0.4286 0 TD
( )Tj
-28.1905 -1.1429 TD
-0.005 Tc
(s - := {h}; ot\(h\).y := Drain\(h.y\) )Tj
-2.6667 -1.119 TD
0.286 Tw
([*] SKIP )Tj
T*
(FI; )Tj
T*
0 Tw
(ms.rel; h.rel  )Tj
-5.3571 -1.1429 TD
0.286 Tw
([*] ms.rel )Tj
0 -1.119 TD
(FI )Tj
-2.6905 -1.119 TD
0 Tw
(  OD )Tj
0 -2.2857 TD
(Drain)Tj
/N38 1 Tf
0 8.743 -8.743 0 276.622 435.828 Tm
0.015 Tw
[( itself does no locking, so we don\222t show its body.  )]TJ
-2.5 -1.92 TD
-0.003 Tc
0.013 Tw
[(The general idea, for parts of the program that can\222t acquire locks i\n the natural order, is to )]TJ
0 -1.18 TD
-0.005 Tc
0.015 Tw
(collect the information you need, one mutex at a time. Then reacquire th\e locks according to the )Tj
0 -1.16 TD
(lock ordering, check that things haven\222t changed \(or at least that y\our conclusions still hold\), and )Tj
T*
-0.004 Tc
0.014 Tw
(do the updates. If it doesn\222t work out, retry. Version numbers can ma\ke the \221didn\222t change\222 )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
(check cheap. This scheme is closely related to optimistic concurrency co\ntrol, which we discuss )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
(later in connection with concurrent transactions. )Tj
0 -1.9 TD
-0.008 Tc
0.018 Tw
(It\222s possible to use a hybrid scheme in which you keep locks as long \as you can, rather than )Tj
0 -1.18 TD
(preparing to acquire a lock by always releasing any larger locks. This w\orks if you can acquire a )Tj
T*
-0.007 Tc
0.017 Tw
(lower lock \221cautiously\222, that is, with a failure indication rather\ than a wait if you can\222t get it. If )Tj
0 -1.16 TD
(you fail in getting a lower lock, fall back to the conservative scheme o\f the last paragraph. This )Tj
T*
(doesn\222t simplify the code \(in fact, it makes the code more complicat\ed\), but it may be faster. )Tj
/N22 1 Tf
0 -2.18 TD
-0.002 Tc
0.012 Tw
[(Nested monitors)7 ( )]TJ
/N38 1 Tf
0 -1.9 TD
-0.006 Tc
0.016 Tw
(A case in which deadlock avoidance by ordering doesn\222t work is known \as \223nested monitors\224. It )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(comes up when there are two levels of abstraction, )Tj
/N51 1 Tf
0 7.344 -7.344 0 447.992 592.333 Tm
0 Tc
0 Tw
(H)Tj
/N38 1 Tf
0 8.743 -8.743 0 447.992 596.705 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 447.992 613.667 Tm
0 Tc
0 Tw
(L)Tj
/N38 1 Tf
0 8.743 -8.743 0 447.992 618.039 Tm
-0.007 Tc
0.017 Tw
[( \(for high and low\), each with its own )]TJ
-23.34 -1.16 TD
-0.006 Tc
(lock )Tj
/N51 1 Tf
0 7.344 -7.344 0 458.134 431.106 Tm
(lH)Tj
/N38 1 Tf
0 8.743 -8.743 0 458.134 439.85 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 458.134 456.812 Tm
-0.005 Tc
(lL)Tj
/N38 1 Tf
0 8.743 -8.743 0 458.134 465.555 Tm
0.01 Tc
(. )Tj
/N51 1 Tf
0 7.344 -7.344 0 458.134 470.102 Tm
0 Tc
0 Tw
(L)Tj
/N38 1 Tf
0 8.743 -8.743 0 458.134 474.473 Tm
-0.01 Tc
0.02 Tw
[( has a condition variable )]TJ
/N51 1 Tf
0 7.344 -7.344 0 458.134 560.682 Tm
-0.005 Tc
(cL)Tj
/N38 1 Tf
0 8.743 -8.743 0 458.134 569.426 Tm
-0.004 Tc
0.014 Tw
(. The code that deadlocks looks like this, if two )Tj
-17.78 -1.16 TD
-0.001 Tc
(threads )Tj
/N51 1 Tf
0 7.344 -7.344 0 468.276 441.423 Tm
0 Tc
0 Tw
(1)Tj
/N38 1 Tf
0 8.743 -8.743 0 468.276 445.795 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 468.276 462.757 Tm
0 Tc
0 Tw
(2)Tj
/N38 1 Tf
0 8.743 -8.743 0 468.276 467.129 Tm
-0.009 Tc
0.019 Tw
[( are using )]TJ
/N51 1 Tf
0 7.344 -7.344 0 468.276 502.976 Tm
0 Tc
0 Tw
(H)Tj
/N38 1 Tf
0 8.743 -8.743 0 468.276 507.348 Tm
0.01 Tc
(, )Tj
/N51 1 Tf
0 7.344 -7.344 0 468.276 511.895 Tm
0 Tc
(1)Tj
/N38 1 Tf
0 8.743 -8.743 0 468.276 516.266 Tm
-0.001 Tc
0.011 Tw
[( needs to wait on )]TJ
/N51 1 Tf
0 7.344 -7.344 0 468.276 577.994 Tm
-0.005 Tc
(cL)Tj
/N38 1 Tf
0 8.743 -8.743 0 468.276 586.738 Tm
-0.004 Tc
0.014 Tw
(, and )Tj
/N51 1 Tf
0 7.344 -7.344 0 468.276 605.973 Tm
0 Tc
0 Tw
(2)Tj
/N38 1 Tf
0 8.743 -8.743 0 468.276 610.345 Tm
-0.022 Tc
0.032 Tw
[( will signal )]TJ
/N51 1 Tf
0 7.344 -7.344 0 468.276 649.69 Tm
-0.005 Tc
(cL)Tj
/N38 1 Tf
0 8.743 -8.743 0 468.276 658.433 Tm
0.01 Tc
(. )Tj
/N51 1 Tf
0 7.344 -7.344 0 482.965 433.904 Tm
-0.005 Tc
0 Tw
(H1: lH.lock; call L1 )Tj
-0.0238 -1.1191 TD
(L1: lL.lock; cL.wait\(lL\) )Tj
0.0238 -2.0238 TD
(H2: lH.lock; call L2 )Tj
-0.0238 -1.119 TD
(L2: lL.lock; cL.signal )Tj
ET
PDFVars/TermAll get exec end end
restore
gsave showpage grestore
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 7 7
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20167 (13 )]TJ
0 8.743 -8.743 0 76.4 36.257 Tm
-0.01 Tc
0.02 Tw
(This will deadlock because the )Tj
/N51 1 Tf
0 7.344 -7.344 0 76.4 144.5 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 76.4 161.986 Tm
-0.029 Tc
0.039 Tw
[( in )]TJ
/N51 1 Tf
0 7.344 -7.344 0 76.4 172.828 Tm
-0.005 Tc
(L1)Tj
/N38 1 Tf
0 8.743 -8.743 0 76.4 181.572 Tm
-0.008 Tc
0.018 Tw
[( releases )]TJ
/N51 1 Tf
0 7.344 -7.344 0 76.4 213.222 Tm
-0.005 Tc
(lL)Tj
/N38 1 Tf
0 8.743 -8.743 0 76.4 221.966 Tm
0 Tc
0.01 Tw
[( but not)-22 ( )]TJ
/N51 1 Tf
0 7.344 -7.344 0 76.4 251.343 Tm
-0.005 Tc
(lH)Tj
/N38 1 Tf
0 8.743 -8.743 0 76.4 260.087 Tm
0.006 Tc
0.004 Tw
(, so that )Tj
/N51 1 Tf
0 7.344 -7.344 0 76.4 290.339 Tm
-0.005 Tc
(H2)Tj
/N38 1 Tf
0 8.743 -8.743 0 76.4 299.082 Tm
-0.003 Tc
0.013 Tw
[( can never get past )]TJ
/N51 1 Tf
0 7.344 -7.344 0 86.717 36.257 Tm
-0.005 Tc
(lH.lock)Tj
/N38 1 Tf
0 8.743 -8.743 0 86.717 66.859 Tm
0.002 Tc
0.008 Tw
[( to reach )]TJ
/N51 1 Tf
0 7.344 -7.344 0 86.717 99.559 Tm
-0.005 Tc
(L2)Tj
/N38 1 Tf
0 8.743 -8.743 0 86.717 108.302 Tm
-0.001 Tc
0.011 Tw
[( and do the )]TJ
/N51 1 Tf
0 7.344 -7.344 0 86.717 149.396 Tm
-0.005 Tc
(signal)Tj
/N38 1 Tf
0 8.743 -8.743 0 86.717 175.626 Tm
-0.008 Tc
0.018 Tw
[(. This is not a lock-)-15 (lock deadlock because it involves the )]TJ
-15.94 -1.16 TD
-0.011 Tc
0.021 Tw
(condition variable )Tj
/N51 1 Tf
0 7.344 -7.344 0 96.86 100.433 Tm
-0.005 Tc
(cL)Tj
/N38 1 Tf
0 8.743 -8.743 0 96.86 109.177 Tm
-0.004 Tc
0.014 Tw
(, so a straightforward deadlock detector will not find it. The picture b\elow )Tj
-8.34 -1.16 TD
-0.005 Tc
0.015 Tw
(illustrates the point. )Tj
ET
0 0 0 RG
1 J
1 j
0.525 w
10 M
[]0 d
1 i
191.462 200.282 m
169.429 182.621 l
S 
167.855 185.069 m
165.232 179.298 l
171.353 180.697 l
167.855 185.069 l
f* 
150.544 178.074 m
133.407 195.211 l
S 
135.68 197.135 m
129.56 199.058 l
131.658 193.113 l
135.68 197.135 l
f* 
162.959 234.381 m
162.784 234.381 l
162.784 234.206 l
162.609 234.206 l
162.609 234.032 l
164.183 232.458 l
164.183 232.283 l
164.358 232.283 l
164.358 232.458 l
164.533 232.458 l
164.533 232.807 l
164.358 232.807 l
162.959 234.381 l
f 
165.582 231.758 m
165.232 231.758 l
165.232 231.234 l
166.806 229.835 l
166.806 229.66 l
166.981 229.66 l
166.981 229.835 l
167.156 229.835 l
167.156 230.184 l
166.981 230.184 l
165.582 231.758 l
f 
168.205 229.135 m
167.855 229.135 l
167.855 228.96 l
167.681 228.96 l
167.681 228.786 l
167.855 228.786 l
167.855 228.611 l
169.429 227.212 l
169.779 227.212 l
169.779 227.561 l
169.604 227.561 l
168.205 229.135 l
f 
170.828 226.512 m
170.478 226.512 l
170.478 226.337 l
170.304 226.337 l
170.304 226.163 l
170.478 226.163 l
170.478 225.988 l
172.052 224.589 l
172.402 224.589 l
172.402 224.938 l
172.227 224.938 l
170.828 226.512 l
f 
173.276 223.889 m
172.927 223.889 l
172.927 223.54 l
173.101 223.54 l
174.5 221.966 l
174.85 221.966 l
174.85 222.141 l
175.025 222.141 l
175.025 222.315 l
174.85 222.315 l
174.85 222.49 l
173.276 223.889 l
f 
175.899 221.266 m
175.899 221.441 l
175.724 221.441 l
175.724 221.266 l
175.55 221.266 l
175.55 220.917 l
175.724 220.917 l
177.123 219.343 l
177.473 219.343 l
177.473 219.867 l
175.899 221.266 l
f 
178.522 218.643 m
178.522 218.818 l
178.347 218.818 l
178.347 218.643 l
178.173 218.643 l
178.173 218.294 l
178.347 218.294 l
179.746 216.72 l
180.096 216.72 l
180.096 217.244 l
178.522 218.643 l
f 
181.145 216.195 m
180.796 216.195 l
180.796 215.671 l
182.369 214.272 l
182.369 214.097 l
182.544 214.097 l
182.544 214.272 l
182.719 214.272 l
182.719 214.621 l
182.544 214.621 l
181.145 216.195 l
f 
183.768 213.572 m
183.419 213.572 l
183.419 213.048 l
184.992 211.649 l
184.992 211.474 l
185.167 211.474 l
185.167 211.649 l
185.342 211.649 l
185.342 211.998 l
185.167 211.998 l
183.768 213.572 l
f 
183.069 209.9 m
189.014 207.802 l
187.091 213.922 l
183.069 209.9 l
f* 
128.336 205.703 m
128.336 205.528 l
128.161 205.528 l
128.51 205.179 l
130.259 206.927 l
129.909 207.277 l
128.336 205.703 l
f 
130.959 208.326 m
130.784 208.151 l
130.784 207.976 l
130.959 207.802 l
131.133 207.802 l
132.882 209.55 l
132.532 209.9 l
130.959 208.326 l
f 
133.582 210.949 m
133.407 210.774 l
133.407 210.599 l
133.582 210.425 l
133.756 210.425 l
135.33 211.998 l
135.33 212.348 l
134.981 212.348 l
133.582 210.949 l
f 
136.205 213.572 m
136.03 213.397 l
136.03 213.222 l
136.205 213.048 l
136.379 213.048 l
137.953 214.621 l
137.953 214.971 l
137.604 214.971 l
136.205 213.572 l
f 
138.653 216.02 m
138.653 215.671 l
139.002 215.671 l
140.576 217.244 l
140.576 217.419 l
140.401 217.594 l
140.226 217.594 l
138.653 216.02 l
f 
141.276 218.643 m
141.101 218.468 l
141.451 218.119 l
143.199 219.867 l
143.199 220.042 l
143.024 220.217 l
142.85 220.217 l
141.276 218.643 l
f 
143.899 221.266 m
143.724 221.091 l
144.074 220.742 l
145.822 222.49 l
145.822 222.665 l
145.647 222.84 l
145.472 222.84 l
143.899 221.266 l
f 
146.522 223.889 m
146.347 223.714 l
146.347 223.54 l
146.522 223.365 l
146.697 223.365 l
148.445 225.113 l
148.096 225.463 l
146.522 223.889 l
f 
149.145 226.512 m
148.97 226.337 l
148.97 226.163 l
149.145 225.988 l
149.32 225.988 l
151.068 227.736 l
150.719 228.086 l
149.145 226.512 l
f 
152.642 225.638 m
154.74 231.758 l
148.62 229.66 l
152.642 225.638 l
f* 
q
115.57 163.735 86.909 85.859 re
W n 
1 1 1 rg
149.494 163.385 15.738 15.913 re
B 
Q
1 1 1 rg
123.439 210.599 m
119.096 210.599 115.57 207.113 115.57 202.818 c
115.57 198.522 119.096 195.036 123.439 195.036 c
127.783 195.036 131.308 198.522 131.308 202.818 c
131.308 207.113 127.783 210.599 123.439 210.599 c
b 
BT
0 8.743 -8.743 0 126.062 201.506 Tm
0 0 0 rg
0 Tc
0 Tw
(1)Tj
0 7.344 -7.344 0 140.401 171.08 Tm
-0.002 Tc
(held)Tj
ET
1 1 1 rg
133.756 221.266 10.492 26.23 re
f 
BT
0 7.344 -7.344 0 140.401 224.239 Tm
0 0 0 rg
(waiting)Tj
ET
1 1 1 rg
175.724 163.735 10.492 26.055 re
f 
BT
0 7.344 -7.344 0 182.369 166.533 Tm
0 0 0 rg
(waiting)Tj
ET
1 1 1 rg
149.494 237.004 m
159.986 226.512 l
170.478 237.004 l
159.986 247.496 l
149.494 237.004 l
b* 
193.911 210.599 m
189.703 210.599 186.216 207.113 186.216 202.818 c
186.216 198.522 189.703 195.036 193.998 195.036 c
198.293 195.036 201.78 198.522 201.78 202.818 c
201.78 207.113 198.293 210.599 193.998 210.599 c
b 
BT
0 8.743 -8.743 0 196.534 201.506 Tm
0 0 0 rg
0 Tc
(2)Tj
0 7.344 -7.344 0 182.369 226.512 Tm
-0.005 Tc
(signal)Tj
1 2.8571 TD
-0.004 Tc
(cL)Tj
-8.9048 0.3095 TD
0 Tc
(lH)Tj
0 8.743 -8.743 0 202.479 249.595 Tm
( )Tj
-24.4 -1.68 TD
-0.004 Tc
0.014 Tw
(To avoid this deadlock, don\222t wait on a condition with )Tj
/N22 1 Tf
21.88 0 TD
-0.001 Tc
(any)Tj
/N38 1 Tf
1.44 0 TD
-0.006 Tc
0.016 Tw
[( locks held, unless you know that the )]TJ
/N51 1 Tf
0 7.344 -7.344 0 227.485 36.257 Tm
(signal)Tj
/N38 1 Tf
0 8.743 -8.743 0 227.485 62.487 Tm
-0.007 Tc
0.017 Tw
[( can happen without acquiring any of these locks. The \221don\222t wait\222\ is simple to check, )]TJ
-3 -1.16 TD
-0.006 Tc
0.016 Tw
(given the annotations that the methodology requires, but the \221unless\222\ may not be simple. )Tj
0 -1.92 TD
-0.008 Tc
0.018 Tw
(People have proposed to solve this problem by generalizing )Tj
/N51 1 Tf
0 7.344 -7.344 0 254.414 244.698 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 254.414 262.185 Tm
-0.002 Tc
0.012 Tw
[( so that it takes a set of mutexes )]TJ
-25.84 -1.16 TD
-0.009 Tc
0.019 Tw
(to release instead of just one. Why is this a bad idea? Aside from the p\roblems of passing the )Tj
0 -1.18 TD
-0.006 Tc
0.016 Tw
(right mutexes down from )Tj
/N51 1 Tf
0 7.344 -7.344 0 274.874 126.314 Tm
0 Tc
0 Tw
(H)Tj
/N38 1 Tf
0 8.743 -8.743 0 274.874 130.685 Tm
0.021 Tc
-0.011 Tw
[( to )]TJ
/N51 1 Tf
0 7.344 -7.344 0 274.874 142.401 Tm
0 Tc
0 Tw
(L)Tj
/N38 1 Tf
0 8.743 -8.743 0 274.874 146.773 Tm
-0.01 Tc
0.02 Tw
(, it means that any call on )Tj
/N51 1 Tf
0 7.344 -7.344 0 274.874 237.354 Tm
0 Tc
0 Tw
(L)Tj
/N38 1 Tf
0 8.743 -8.743 0 274.874 241.726 Tm
-0.011 Tc
0.021 Tw
[( might release )]TJ
/N51 1 Tf
0 7.344 -7.344 0 274.874 292.087 Tm
-0.005 Tc
(lH)Tj
/N38 1 Tf
0 8.743 -8.743 0 274.874 300.831 Tm
-0.001 Tc
0.011 Tw
(. The )Tj
/N51 1 Tf
0 7.344 -7.344 0 274.874 321.115 Tm
0 Tc
0 Tw
(H)Tj
/N38 1 Tf
0 8.743 -8.743 0 274.874 325.487 Tm
-0.004 Tc
0.014 Tw
[( programmer )]TJ
-33.08 -1.16 TD
(must to be careful not to depend on anything more than the )Tj
/N51 1 Tf
0 7.344 -7.344 0 285.016 244.349 Tm
-0.005 Tc
(lH)Tj
/N38 1 Tf
0 8.743 -8.743 0 285.016 253.092 Tm
-0.009 Tc
0.019 Tw
[( invariant across any call to )]TJ
/N51 1 Tf
0 7.344 -7.344 0 285.016 349.793 Tm
0 Tc
0 Tw
(L)Tj
/N38 1 Tf
0 8.743 -8.743 0 285.016 354.165 Tm
-0.01 Tc
0.02 Tw
(. This )Tj
-36.36 -1.16 TD
-0.009 Tc
0.019 Tw
(style of programming is very error-)Tj
13.94 0 TD
0.002 Tc
(prone. )Tj
/N39 1 Tf
0 10.142 -10.142 0 316.317 36.257 Tm
-0.004 Tc
0.013 Tw
(Problems in easy concurrency: Scheduling )Tj
/N38 1 Tf
0 8.743 -8.743 0 335.203 36.257 Tm
-0.006 Tc
0.016 Tw
(If there is a shortage of processor resources, there are various ways in\ which the simple easy )Tj
0 -1.18 TD
0.015 Tw
(concurrency method can go astray. In this situation we may want some thr\eads to have priority )Tj
0 -1.16 TD
-0.003 Tc
0.013 Tw
[(over others, but subject to this constraint we want the processor resour\ces allocated fairly. This )]TJ
0 -1.18 TD
(means that the amount of time a task takes should be roughly proportiona\l to the amount of work )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
(it does; in particular, we don\222t want short tasks to be blocked by lo\ng ones. )Tj
/N22 1 Tf
0 -2.16 TD
-0.003 Tc
0.013 Tw
(Priority inversion )Tj
/N38 1 Tf
0 -1.92 TD
-0.008 Tc
0.018 Tw
[(When there are priorities there can be \223priority inversion\224. This \happens when a low-)-15 (priority )]TJ
0 -1.16 TD
0 Tc
(thread )Tj
/N51 1 Tf
0 7.344 -7.344 0 421.937 60.389 Tm
0 Tw
(A)Tj
/N38 1 Tf
0 8.743 -8.743 0 421.937 64.761 Tm
-0.003 Tc
0.013 Tw
[( acquires a lock and then loses the CPU, either to a higher-)-10 (priority thread or to round-)]TJ
-3.26 -1.18 TD
-0.008 Tc
0.018 Tw
[(robin scheduling. Now a high-)-15 (priority thread )]TJ
/N51 1 Tf
0 7.344 -7.344 0 432.254 193.288 Tm
0 Tc
0 Tw
(B)Tj
/N38 1 Tf
0 8.743 -8.743 0 432.254 197.659 Tm
-0.005 Tc
0.015 Tw
[( tries to acquire the lock and ends up waiting for)-12 ( )]TJ
/N51 1 Tf
0 7.344 -7.344 0 442.396 36.257 Tm
0 Tc
0 Tw
(A)Tj
/N38 1 Tf
0 8.743 -8.743 0 442.396 40.629 Tm
-0.009 Tc
0.019 Tw
(. Clearly the priority of )Tj
/N51 1 Tf
0 7.344 -7.344 0 442.396 122.467 Tm
0 Tc
0 Tw
(A)Tj
/N38 1 Tf
0 8.743 -8.743 0 442.396 126.838 Tm
-0.006 Tc
0.016 Tw
[( should be temporarily increased to that of )]TJ
/N51 1 Tf
0 7.344 -7.344 0 442.396 275.825 Tm
0 Tc
0 Tw
(B)Tj
/N38 1 Tf
0 8.743 -8.743 0 442.396 280.196 Tm
-0.015 Tc
0.025 Tw
[( until )]TJ
/N51 1 Tf
0 7.344 -7.344 0 442.396 300.131 Tm
0 Tc
0 Tw
(A)Tj
/N38 1 Tf
0 8.743 -8.743 0 442.396 304.503 Tm
-0.007 Tc
0.017 Tw
[( completes its )]TJ
-30.68 -1.16 TD
-0.004 Tc
0.014 Tw
(critical section, so that )Tj
/N51 1 Tf
0 7.344 -7.344 0 452.538 116.696 Tm
0 Tc
0 Tw
(B)Tj
/N38 1 Tf
0 8.743 -8.743 0 452.538 121.068 Tm
-0.005 Tc
0.015 Tw
[( can continue. Otherwise )]TJ
/N51 1 Tf
0 7.344 -7.344 0 452.538 209.55 Tm
0 Tc
0 Tw
(B)Tj
/N38 1 Tf
0 8.743 -8.743 0 452.538 213.922 Tm
-0.01 Tc
0.02 Tw
[( may wait for a long time while threads with )]TJ
-20.32 -1.18 TD
-0.006 Tc
0.016 Tw
(priorities between )Tj
/N51 1 Tf
0 7.344 -7.344 0 462.855 100.608 Tm
0 Tc
0 Tw
(A)Tj
/N38 1 Tf
0 8.743 -8.743 0 462.855 104.98 Tm
-0.008 Tc
0.018 Tw
[( and )]TJ
/N51 1 Tf
0 7.344 -7.344 0 462.855 121.942 Tm
0 Tc
0 Tw
(B)Tj
/N38 1 Tf
0 8.743 -8.743 0 462.855 126.314 Tm
-0.008 Tc
0.018 Tw
[( run, which is not what we had in mind when we set up the priority )]TJ
-10.3 -1.16 TD
-0.01 Tc
(scheme. )Tj
/N22 1 Tf
0 -2.16 TD
-0.001 Tc
0.011 Tw
(Granularity of locks )Tj
/N38 1 Tf
0 -1.92 TD
-0.007 Tc
0.017 Tw
(A different issue is the \221granularity\222 of the locks: how much data\ each lock protects. A single )Tj
0 -1.18 TD
-0.008 Tc
0.018 Tw
[(lock is simple and cheap, but doesn\222t allow any concurrency. Lots of \fine-)-15 (grained locks allow )]TJ
0 -1.16 TD
-0.005 Tc
0.015 Tw
(lots of concurrency, but the program is more complicated, there\222s mor\e overhead for acquiring )Tj
T*
-0.008 Tc
0.018 Tw
(locks, and there\222s more chance for deadlock \(discussed earlier\). Fo\r example, a file system might )Tj
0 7.344 -7.344 0 38.279 413.969 Tm
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.619 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20167 (14 )]TJ
0 8.743 -8.743 0 76.4 413.969 Tm
-0.008 Tc
0.018 Tw
(have a single global lock, one lock on each directory, one lock on each \file, or locks only on byte )Tj
0 -1.18 TD
(ranges within a file. The goal is to have fine enough granularity that t\he queue of threads waiting )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
(on a mutex is empty most of the time. More locks than that don\222t acco\mplish anything. )Tj
0 -1.9 TD
-0.006 Tc
0.016 Tw
[(It\222s possible to have an adaptive scheme in which locks start out fin\e-)-13 (grained, but when a thread )]TJ
0 -1.18 TD
-0.004 Tc
0.014 Tw
(acquires too many locks they are collapsed into fewer coarser ones that \cover larger sets of )Tj
0 -1.16 TD
-0.006 Tc
0.016 Tw
(variables. This process is called \221escalation\222. It\222s also possi\ble to go the other way: a process )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(keeps track of the exact variables it needs to lock, but takes out much \coarser locks until there is )Tj
0 -1.16 TD
[(contention. Then the coarse locks are \221de-)-11 (escalated\222 to finer ones until the contention disappears. )]TJ
0 -1.9 TD
-0.007 Tc
0.017 Tw
(Closely related to the choice of granularity is the question of how long\ locks are held. If a lock )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(that protects a lot of data is held for a long time \(for instance, acro\ss a disk reference or an )Tj
T*
-0.006 Tc
0.016 Tw
(interaction with the user\) concurrency will obviously suffer. Such a lo\ck should protect the )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
(minimum amount of data that is in flux during the slow operation. The co\ncurrent buffered disk )Tj
T*
(example in handout 15 illustrates this point. )Tj
0 -1.92 TD
-0.007 Tc
0.017 Tw
(On the other hand, sometimes you want to minimize the amount of communic\ation needed for )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(acquiring and releasing the same lock repeatedly. To do this, you hold o\nto the lock for longer )Tj
0 -1.18 TD
-0.003 Tc
0.013 Tw
(than is necessary for correctness. Another thread that wants to acquire \the lock must somehow )Tj
0 -1.16 TD
-0.009 Tc
0.019 Tw
(signal the holder to release it. This scheme is commonly used in distrib\uted coherent caches, in )Tj
T*
-0.006 Tc
0.016 Tw
[(which the lock only needs to be held across a single read, write, or tes\t-)-13 (and-)]TJ
30.14 0 TD
0.001 Tc
0.009 Tw
(set operation, but one )Tj
-30.14 -1.18 TD
-0.008 Tc
0.018 Tw
(thread may access the same location \(or cache line\) many times before \a different thread touches )Tj
0 -1.16 TD
-0.002 Tc
(it. )Tj
/N22 1 Tf
0 -2.16 TD
0.012 Tw
(Lock modes )Tj
/N38 1 Tf
0 -1.92 TD
-0.006 Tc
0.016 Tw
(Another way to get more concurrency at the expense of complexity is to h\ave many lock )Tj
0 -1.18 TD
-0.01 Tc
0.02 Tw
(\221modes\222. A mutex has one mode, usually called \221exclusive\222 si\nce \221mutex\222 is short for \221mutual )Tj
0 -1.16 TD
-0.006 Tc
0.016 Tw
(exclusion\222. A reader/writer lock has two modes, called exclusive and \\221shared\222. It\222s possible to )Tj
T*
-0.008 Tc
0.018 Tw
[(have as many modes as there are different kinds of commuting operations.\ Thus all reads )]TJ
0 -1.18 TD
-0.005 Tc
0.015 Tw
(commute and therefore need only shared mode \(reader\) locks. But a writ\e commutes with )Tj
0 -1.16 TD
0.016 Tw
(nothing and therefore needs an exclusive mode \(write\) lock. The commut\ativity of the operations )Tj
T*
-0.007 Tc
0.017 Tw
(is reflected in a \221conflict relation\222 on the locks. For reader/wri\ter or shared/exclusive locks this )Tj
0 -1.18 TD
-0.013 Tc
0.023 Tw
(matrix is: )Tj
2.7 -1.9 TD
-0.004 Tc
0.014 Tw
[( )-8000 (None )-5200 (Shared \(read\) )-1940 (Exclusive \(write\) )]TJ
ET
399.029 505.424 16.787 0.525 re
f 
BT
0 8.743 -8.743 0 424.56 437.576 Tm
-0.002 Tc
5.952 Tw
[(None )100 (O)10 (K)10 ( O)10 (K)10 ( O)10 (K)10 ( )]TJ
ET
415.816 433.379 0.525 72.045 re
f 
415.816 505.424 0.525 0.525 re
f 
415.816 505.949 0.525 66.1 re
f 
415.816 572.049 0.525 0.525 re
f 
415.816 572.573 0.525 66.274 re
f 
415.816 638.848 0.525 0.525 re
f 
415.816 639.372 0.525 66.1 re
f 
415.816 705.472 0.525 0.525 re
f 
415.816 705.996 0.525 0.525 re
f 
415.816 706.521 0.525 5.421 re
f 
416.341 505.424 10.142 0.525 re
f 
BT
0 8.743 -8.743 0 434.702 437.576 Tm
0 Tc
0.01 Tw
[(Shared \(read\) )-2580 (O)12 (K)12 ( )-5940 (O)12 (K)12 ( )]TJ
23.5 0 TD
-0.012 Tc
(Conflict )Tj
ET
426.483 505.424 10.317 0.525 re
f 
BT
0 8.743 -8.743 0 445.019 437.576 Tm
-0.01 Tc
0.02 Tw
[(Exclusive \(write\) )-1200 (OK )-5940 (Conflict )-4180 (Conflict )]TJ
ET
436.8 505.424 10.142 0.525 re
f 
BT
0 8.743 -8.743 0 461.631 413.969 Tm
-0.008 Tc
0.018 Tw
(Just as different granularities bring a need for escalation, different m\odes bring a need for \221lock )Tj
0 -1.18 TD
-0.006 Tc
0.016 Tw
(conversion\222, which upgrades a lock to a higher mode, for instance fro\m shared to exclusive, or )Tj
0 -1.16 TD
-0.001 Tc
0.011 Tw
(downgrades it to a lower mode. )Tj
/N22 1 Tf
0 -2.16 TD
0 Tc
0.01 Tw
(Explicit scheduling )Tj
/N38 1 Tf
0 -1.92 TD
-0.007 Tc
0.017 Tw
(In simple situations, queuing for locks is an adequate way to schedule t\hreads. When things are )Tj
0 -1.18 TD
(more complicated, however, it\222s necessary to program the scheduling e\xplicitly because the )Tj
0 -1.16 TD
-0.008 Tc
0.018 Tw
[(simple first-)-15 (come first-)-15 (served queuing of a lock isn\222t what you want. A set of printers with \)]TJ
ET
PDFVars/TermAll get exec end end
restore
gsave showpage grestore
PDFVars begin PDF begin PDFVars/InitAll get exec
%%Page: 8 8
save
-90 rotate -792 0 translate
90 rotate
0 -792 translate
% Now emitting TrueType fonts
% Now emitting non-TrueType, non-Type-3 fonts
% Now emitting Type-3 fonts.
% Now emitting encodings
% No more fonts or encodings past this point.
/N58 8 dict dup begin
/SA true def
/OP false def
end /ExtGState defineRes pop
0 0 612 792 RC
BT
/N38 1 Tf
0 7.344 -7.344 0 38.279 36.257 Tm
0 0 0 rg
/N58 /ExtGState findRes gs
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20167 (15 )]TJ
0 8.743 -8.743 0 76.4 36.257 Tm
-0.007 Tc
[(different properties, for example, can be optimized across a set of jobs\ with different priorities, )]TJ
0 -1.18 TD
(requirements for paper handling, paper sizes, color, etc. There have bee\n many unsuccessful )Tj
0 -1.16 TD
(attempts to build general resource allocation systems to handle these pr\oblems. They fail because )Tj
T*
-0.008 Tc
0.018 Tw
[(they are too complicated and expensive for simple cases, and not flexibl\e enough for )]TJ
0 -1.18 TD
-0.005 Tc
0.015 Tw
(complicated ones. A better strategy is to program the scheduling as part\ of the application, using )Tj
0 -1.16 TD
(as many condition variables as necessary to queue threads that are waiti\ng for resources. )Tj
T*
[(Application-)-12 (specific data structures can keep track of the various resource demands \and )]TJ
0 -1.18 TD
0.016 Tw
[(application-)-13 (specific code, perhaps written on top of a library, can do the optimizat\ion. )]TJ
0 -1.9 TD
0.015 Tw
(Just as you must choose the granularity of locks, you must also choose t\he granularity of )Tj
0 -1.18 TD
-0.007 Tc
0.017 Tw
(conditions. With just a few conditions \(in the limit, only one\), it\222\s easy to figure out which one to )Tj
0 -1.16 TD
(wait on and which ones to signal. The price you pay is that a thread \(o\r many threads\) may wake )Tj
T*
(up from a )Tj
/N51 1 Tf
0 7.344 -7.344 0 195.134 72.28 Tm
-0.005 Tc
(wait)Tj
/N38 1 Tf
0 8.743 -8.743 0 195.134 89.767 Tm
-0.008 Tc
0.018 Tw
[( only to find that it has to wait again, and this is inefficient. On the\ other hand, )]TJ
-6.12 -1.18 TD
-0.007 Tc
0.017 Tw
(with many conditions you can make useless wakeups very rare, but more ca\re is needed to )Tj
0 -1.16 TD
-0.004 Tc
0.014 Tw
(ensure that a thread doesn\222t get stuck because its condition isn\222t\ signaled. )Tj
/N39 1 Tf
0 10.142 -10.142 0 236.578 36.257 Tm
-0.002 Tc
0.011 Tw
(Simple vs. fancy locks )Tj
/N38 1 Tf
0 8.743 -8.743 0 255.638 36.257 Tm
-0.008 Tc
0.018 Tw
[(W)6 (e)6 ( have described a number of features that you might want in a locking sy\stem:  )]TJ
/N23 1 Tf
0 -1.92 TD
0 Tc
(\267 )Tj
/N38 1 Tf
1.5 0 TD
-0.009 Tc
0.019 Tw
(multiple modes with conversion, for instance from shared to exclusive; )Tj
/N23 1 Tf
-1.5 -1.9 TD
0 Tc
(\267 )Tj
/N38 1 Tf
1.5 0 TD
-0.007 Tc
0.017 Tw
[(multiple granularities with escalation from fine to coarse and de-)-14 (escalation from coarse to )]TJ
0 -1.18 TD
-0.023 Tc
(fine; )Tj
/N23 1 Tf
-1.5 -1.92 TD
0 Tc
(\267 )Tj
/N38 1 Tf
1.5 0 TD
-0.002 Tc
0.012 Tw
(deadlock detection. )Tj
-1.5 -1.9 TD
-0.008 Tc
0.018 Tw
(Database systems typically provide these features. In addition, they acq\uire locks automatically )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(based on how an application transaction touches data, choosing the mode \based on what the )Tj
T*
-0.007 Tc
0.017 Tw
(operation is, and they can release locks automatically when a transactio\n commits. For a )Tj
0 -1.16 TD
-0.006 Tc
0.016 Tw
(thorough discussion of database locking see Jim Gray and Andreas Reuter,\ )Tj
/N22 1 Tf
29.94 0 TD
-0.001 Tc
(Transaction )Tj
-29.94 -1.16 TD
-0.002 Tc
0.012 Tw
(Processing: Concepts and Techniques)Tj
/N38 1 Tf
15.26 0 TD
0.013 Tw
[(, Morgan Kaufmann, 1993, Chapter 8, pages 449-)-10 (492. )]TJ
-15.26 -1.92 TD
-0.008 Tc
0.018 Tw
(The main reason that database systems have such elaborate locking facili\ties is that the )Tj
0 -1.16 TD
-0.005 Tc
0.015 Tw
(application programmers are quite naive and can\222t be expected to unde\rstand the subtleties of )Tj
0 -1.18 TD
0.016 Tw
(concurrent programming. Instead, the system does almost everything autom\atically, and the )Tj
0 -1.16 TD
-0.007 Tc
0.017 Tw
(programmers can safely assume that execution is sequential. Automatic me\chanisms that work )Tj
T*
(well across a wide range of applications need to adapt in the ways liste\d above.  )Tj
0 -1.92 TD
-0.009 Tc
0.019 Tw
(By contrast, a simple mutex has only one mode \(exclusive\), only one gr\anularity, and no )Tj
0 -1.18 TD
-0.004 Tc
0.014 Tw
(deadlock detection. If these features are needed, the programmer has to \provide them using the )Tj
0 -1.16 TD
-0.01 Tc
0.02 Tw
(mutex and condition primitives. We will study one example of this in det\ail in handout 17 on )Tj
T*
-0.008 Tc
0.018 Tw
(formal concurrency: building a reader/writer lock from a simple mutex. M\any others are )Tj
0 -1.18 TD
-0.01 Tc
(possible. )Tj
0 7.344 -7.344 0 38.279 413.969 Tm
-0.005 Tc
0.017 Tw
[(6.826\227Principles of Computer Systems )-6928 ( )-20952 (1999 )]TJ
0 -73.6191 TD
[(Handout 14.  Practical Concurrency )-10500 ( )-20167 (16 )]TJ
/N39 1 Tf
0 10.142 -10.142 0 76.4 413.969 Tm
-0.003 Tc
0.012 Tw
[(S)10 (u)10 (mmary of easy concurrency )]TJ
/N38 1 Tf
0 8.743 -8.743 0 95.286 413.969 Tm
-0.006 Tc
0.016 Tw
(There are four simple steps: )Tj
0 -1.92 TD
-0.003 Tc
0.013 Tw
[(1.)-18 ( )-480 (Protect each shared data item with a lock, and acquire the lock before t\ouching the data. )]TJ
T*
-0.007 Tc
0.017 Tw
[(2.)-22 ( )-480 (Write down the invariant which holds on shared data when a lock isn\222t\ held, and don\222t )]TJ
1.5 -1.18 TD
(depend on any property of the shared unless it follows from the invarian\t. )Tj
-1.5 -1.9 TD
-0.004 Tc
0.014 Tw
[(3.)-19 ( )-480 (If you have to wait for some other thread to do something before you can\ continue, avoid )]TJ
1.5 -1.18 TD
-0.009 Tc
0.019 Tw
(busy waiting by waiting on a condition. When you take some action that m\ight allow a )Tj
0 -1.16 TD
-0.006 Tc
0.016 Tw
(waiting thread to continue, signal the proper condition variable. )Tj
-1.5 -1.9 TD
[(4.)-21 ( )-480 (To avoid deadlock, define a partial order on the locks, and acquire a lo\ck only if it is greater )]TJ
1.5 -1.18 TD
-0.004 Tc
0.014 Tw
(in the order than any lock you already hold. To make this work with proc\edures, annotate a )Tj
T*
-0.007 Tc
0.017 Tw
[(procedure with a pre-)-14 (condition: the maximum set of locks that are held whenever it\222s calle\d. )]TJ
ET
PDFVars/TermAll get exec end end
restore
showpage
%%EOF
